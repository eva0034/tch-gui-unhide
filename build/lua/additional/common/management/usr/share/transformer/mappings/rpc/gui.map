local find,format,match = string.find,string.format,string.match
local popen = io.popen
local ping_cmd = "ping -q -c 1 -w 1 8.8.8.8"
local curl_cmd = "curl -qskL"
local release_version_cmd = format("%s -r0-9 -m2 --connect-timeout 1 https://raw.githubusercontent.com/seud0nym/tch-gui-unhide/master/VERSION.txt",curl_cmd)
local current_version = "" -- Set by build script
local current_version_date = match(current_version,"(%d%d%d%d%.%d%d%.%d%d)@.*")
local ignored_release_version_file = "/etc/tch-gui-unhide.ignored_release"
local marketing_version = "" -- Set by build script

local release_version = {
  date = nil,
  lastRetrieved = nil,
}

local function checkForUpgradeProcess()
  local pgrep,procs = popen(format("pgrep -f 'tch-gui-unhide-%s'",marketing_version),"r"),""
  if pgrep then
    procs = pgrep:read("*a")
    pgrep:close()
  end
  return procs
end

local function getIgnoredReleaseVersionDate()
  local version = ""
  local file = io.open(ignored_release_version_file,"r")
  if file then
    version = file:read()
    file:close()
  end
  return version
end

local function getReleaseVersionDate()
  local time = os.time()

  if release_version.lastRetrieved and ( time - release_version.lastRetrieved ) < 600 then
    return release_version.date
  end

  local ping = popen(ping_cmd,"r")
  if ping then
    if find(ping:read("*a") or "", "1 packets transmitted, 1 packets received") then
      local curl = popen(release_version_cmd,"r")
      if curl then
        local v = match(curl:read() or "","^%d%d%d%d%.%d%d%.%d%d$")
        curl:close()
        if v then
          release_version.date = v
        end
      end
    end
    ping:close()
  end

  release_version.lastRetrieved = time

  return release_version.date
end

local function download(path,filename)
  os.execute(format("logger -t tch-gui-unhide -p user.debug Downloading %s",path))
  local cmd = format("%s -m5 -o /dev/null -w '%%{http_code}' %s",curl_cmd,path)
  local response_code
  local curl,errmsg = popen(cmd,"r")
  if curl then
    response_code = curl:read("*n")
    curl:close()
    if response_code == 200 then
      cmd = format("%s -o/tmp/%s -w '%%{http_code}' %s",curl_cmd,filename,path)
      curl,errmsg = popen(cmd,"r")
      if curl then
        response_code = curl:read("*n")
        curl:close()
        if response_code == 200 then
          os.execute(format("chmod +x /tmp/%s",filename))
          return true
        end
      end
    end
    return nil,tostring(response_code)
  end
  return nil,errmsg
end

local GUI_ = {
  objectType = {
    name = "rpc.gui.",
    access = "readOnly",
    minEntries = 1,
    maxEntries = 1,
    parameters = {
      IgnoreCurrentRelease = {
        access = "readWrite",
        type = "boolean"
      },
      UnhideVersion = {
        access = "readOnly",
        type = "string"
      },
      UpdateAvailable = {
        access = "readOnly",
        type = "boolean"
      },
      UpdateNow = {
        access = "readWrite",
        type = "string"
      },
      UpdateRunningProcessID = {
        access = "readOnly",
        type = "string"
      },
    }
  }
}

GUI_.get = {
  IgnoreCurrentRelease = function()
    if getReleaseVersionDate() == getIgnoredReleaseVersionDate() then
      return "1"
    else
      return "0"
    end
  end,
  UnhideVersion = function()
    return current_version
  end,
  UpdateAvailable = function()
    local release_version_date = getReleaseVersionDate()
    if release_version_date and release_version_date > current_version_date and release_version_date ~= getIgnoredReleaseVersionDate() then
      return "1"
    else
      return "0"
    end
  end,
  UpdateNow = function()
    return ""
  end,
  UpdateRunningProcessID = checkForUpgradeProcess
}

GUI_.set = {
  IgnoreCurrentRelease = function(_,_,value,_)
    local file,err_msg = io.open(ignored_release_version_file,"w")
    if file then
      if value == "1" then
        file:write(getReleaseVersionDate())
      else
        file:write("")
      end
      file:close()
      return true
    else
      return nil,"Failed to persist ignored release version: " .. err_msg,"error"
    end
  end,
  UpdateNow = function(_,_,value,_)
    if value ~= marketing_version then
      return nil,"Firmware version mismatch? Upgrade for "..value.." requested, but "..marketing_version.." installed!"
    end
    local procs = checkForUpgradeProcess()
    if procs ~= "" then
      return nil,"Upgrade aborted! Already running ( Process ID = "..procs..")"
    end
    local okay,response_code = download(format("https://github.com/seud0nym/tch-gui-unhide/releases/latest/download/%s.tar.gz",marketing_version),"tch-gui-unhide.tar.gz")
    if okay then
      okay,response_code = download("https://raw.githubusercontent.com/seud0nym/tch-gui-unhide/master/extras/src/.extras",".extras")
      if okay then
        local extras = io.open("/tmp/.extras","r")
        if extras then
          for file in extras:lines() do
            if file ~= "" then
              okay,response_code = download(format("https://raw.githubusercontent.com/seud0nym/tch-gui-unhide/master/extras/%s",file),file)
              if okay then
                os.execute(format("chmod +x /tmp/%s",file))
              else
                os.execute(format("logger -t tch-gui-unhide -p user.warn Download of %s FAILED (Response code=%s)",file,response_code))
              end
            end
          end
          extras:close()
        end
      else
        os.execute(format("logger -t tch-gui-unhide -p user.warn Download of extras list FAILED (Response code=%s)",response_code))
      end
      -- build/common/890-Utilities-Upgrade has a dependency on the following command string!
      os.execute(format("cd /tmp; tar -xzf tch-gui-unhide.tar.gz; rm .extras tch-gui-unhide.tar.gz; sh ./tch-gui-unhide -y 2>&1 | logger -t tch-gui-unhide -p user.info",marketing_version))
      return true
    end
    return nil,format("Download of https://github.com/seud0nym/tch-gui-unhide/releases/latest/download/%s.tar.gz FAILED (Response code=%s)",marketing_version,response_code)
  end,
}

register(GUI_)

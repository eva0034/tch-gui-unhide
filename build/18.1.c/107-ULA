echo [$SCRIPT]: Adding transformer support for IPv6 ULA Prefix
sed \
 -e '/^uci_1to1.registerSimpleMap(network_config)/a \ ' \
 -e '/^uci_1to1.registerSimpleMap(network_config)/a \-- uci.network.globals.' \
 -e '/^uci_1to1.registerSimpleMap(network_config)/a \local network_globals = {' \
 -e '/^uci_1to1.registerSimpleMap(network_config)/a \    config = config_network,' \
 -e '/^uci_1to1.registerSimpleMap(network_config)/a \    section = "globals",' \
 -e '/^uci_1to1.registerSimpleMap(network_config)/a \    type = "globals",' \
 -e '/^uci_1to1.registerSimpleMap(network_config)/a \    options = {' \
 -e '/^uci_1to1.registerSimpleMap(network_config)/a \        "ula_prefix",' \
 -e '/^uci_1to1.registerSimpleMap(network_config)/a \    }' \
 -e '/^uci_1to1.registerSimpleMap(network_config)/a \}' \
 -e '/^uci_1to1.registerSimpleMap(network_config)/a \ ' \
 -e '/^uci_1to1.registerSimpleMap(network_config)/a \uci_1to1.registerSimpleMap(network_globals)' \
 -i /usr/share/transformer/mappings/uci/network.map

echo [$SCRIPT]: Adding IPv6 Prefix Size and ULA Prefix
sed \
 -e '/^local gVIES/a \local vIAS6 = gOV(post_helper.validateIPAndSubnet(6))' \
 -e '/^local function validateIPv6/i \local function validateULAPrefix(value, object, key)' \
 -e '/^local function validateIPv6/i \  local valid, msg = vIAS6(value, object, key)' \
 -e '/^local function validateIPv6/i \  if valid and value ~= "" and (string.sub(string.lower(value),1,2) ~= "fd" or string.sub(value,-3,-1) ~= "/48") then' \
 -e '/^local function validateIPv6/i \    return nil, "ULA Prefix must be within the prefix fd::/7, with a range of /48"' \
 -e '/^local function validateIPv6/i \  end' \
 -e '/^local function validateIPv6/i \  return valid, msg' \
 -e '/^local function validateIPv6/i \end' \
 -e '/mapValid.dhcpv4State = validateByPass/a \else' \
 -e '/mapValid.dhcpv4State = validateByPass/a \    mapParams.ip6assign = "uci.network.interface.@" .. curintf .. ".ip6assign"' \
 -e '/mapValid.dhcpv4State = validateByPass/a \    mapValid.ip6assign = gOV(gVNIR(48,64))' \
 -e '/mapValid.dhcpv4State = validateByPass/a \    mapParams.ula_prefix = "uci.network.globals.ula_prefix"' \
 -e '/mapValid.dhcpv4State = validateByPass/a \    mapValid.ula_prefix = validateULAPrefix' \
 -e '/"IPv6 State"/i \            local ula_attr = {' \
 -e '/"IPv6 State"/i \              controls = { style = "width:220px", },' \
 -e '/"IPv6 State"/i \              group = { class = "monitor-localIPv6 monitor-1 monitor-hidden-localIPv6", },' \
 -e '/"IPv6 State"/i \              input = { style = "width:180px", }' \
 -e '/"IPv6 State"/i \            }' \
 -e '/"IPv6 State"/i \            local number_attr = {' \
 -e '/"IPv6 State"/i \              group = { class = "monitor-localIPv6 monitor-1 monitor-hidden-localIPv6", },' \
 -e '/"IPv6 State"/i \              select = { style = "width:100px", }'\
 -e '/"IPv6 State"/i \            }'\
 -e '/"IPv6 State"/a \            if not bridged.isBridgedMode() then' \
 -e '/"IPv6 State"/a \              if curintf == "lan" then' \
 -e "/\"IPv6 State\"/a \                ngx.print(ui_helper.createInputText(T\"IPv6 ULA Prefix<span class='icon-question-sign' title='IPv6 equivalent of IPv4 private addresses. Must start with fd followed by 40 random bits and a /48 range (e.g. fd12:3456:789a::/48)'></span>\", \"ula_prefix\", content[\"ula_prefix\"], ula_attr, helpmsg[\"ula_prefix\"]))" \
 -e '/"IPv6 State"/a \              end' \
 -e '/"IPv6 State"/a \              local min_prefix_len = 48' \
 -e '/"IPv6 State"/a \              local ip6prefix = proxy.get(require("ipv6_rpc_path").getPath("ip6prefix"))' \
 -e '/"IPv6 State"/a \              if ip6prefix and ip6prefix[1].value ~= "" then' \
 -e '/"IPv6 State"/a \                min_prefix_len = tonumber(match(untaint(ip6prefix[1].value),"/(%d+)$")) or 48' \
 -e '/"IPv6 State"/a \              end' \
 -e '/"IPv6 State"/a \              if min_prefix_len < 64 then min_prefix_len = min_prefix_len + 1 end' \
 -e '/"IPv6 State"/a \              local req_prefix_map = {}' \
 -e '/"IPv6 State"/a \              for prefix_len = 64,min_prefix_len,-1 do' \
 -e '/"IPv6 State"/a \                req_prefix_map[#req_prefix_map+1] = { tostring(prefix_len),T("/"..prefix_len) }' \
 -e '/"IPv6 State"/a \              end' \
 -e "/\"IPv6 State\"/a \              ngx.print(ui_helper.createInputSelect(T\"IPv6 Prefix Size<span class='icon-question-sign' title='Delegate a prefix of the given length to this interface'></span>\",\"ip6assign\",req_prefix_map,content[\"ip6assign\"],number_attr,helpmsg[\"ip6assign\"]))" \
 -e '/"IPv6 State"/a \            end' \
 -e '/^(function() {/i \function rand(max){return Math.floor(Math.random()*max);}\\' \
 -e '/^(function() {/i \function rand16() {return rand(2**16).toString(16);}\\' \
 -e '/^(function() {/a \  var gen_ula_span = document.createElement("SPAN");\\' \
 -e '/^(function() {/a \  gen_ula_span.setAttribute("id","random_ula_prefix");\\' \
 -e '/^(function() {/a \  gen_ula_span.setAttribute("class","btn icon-random");\\' \
 -e '/^(function() {/a \  gen_ula_span.setAttribute("style","padding:5px 3px 8px 3px;");\\' \
 -e '/^(function() {/a \  gen_ula_span.setAttribute("title","Click to generate a random ULA prefix");\\' \
 -e '/^(function() {/a \  $("#ula_prefix").after(gen_ula_span);\\' \
 -e '/^(function() {/a \  $("#random_ula_prefix").click(function(){var i=$("#ula_prefix");i.val((parseInt("fd00",16)+rand(2**8)).toString(16)+":"+rand16()+":"+rand16()+"::/48");var e=jQuery.Event("keydown");e.which=e.keyCode=13;i.trigger(e);});\\' \
 -i /www/docroot/modals/ethernet-modal.lp


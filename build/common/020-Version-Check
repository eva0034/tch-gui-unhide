toComparableVersion() {
  local major=$(echo -n $1 | sed -e 's/^0*//')
  local minor=$(echo -n $2 | sed -e 's/^0*//')
  local subminor=$(echo -n $3 | sed -e 's/^0*//')
  local revision=$(echo -n $4 | sed -e 's/^0*//')
  if [ -z "$revision" ]; then
    revision=$subminor
    subminor=0
  else
    subminor=$(echo -n $subminor | hexdump -d | head -n 1 | sed -e 's/^[0 ]*//')
  fi
  printf "%02d%02d%03d%04d" $major $minor $subminor $revision
}
VERSION=$(uci get version.@version[0].version | cut -d- -f1)
FW_BASE=$(uci get version.@version[0].marketing_version)
COMPVER=$(toComparableVersion $(echo $VERSION | tr '.' ' '))

if [ "$FW_BASE" = "$TARGET_VERSION" ]; then
  echo [$SCRIPT]: Current version matches target \($TARGET_VERSION\)
elif [ "$VERSION" = "20.4.0256" ]; then
  echo [$SCRIPT]: Sorry!! Version 20.4.0256 is 0-day, pre-release, unsupported firmware.
  exit
else
  echo [$SCRIPT]: WARNING: This script was developed for the $TARGET_VERSION firmware.
  echo [$SCRIPT]: It MAY work on your $VARIANT with $FW_BASE firmware, but it also may not.
  echo [$SCRIPT]: If you still wish to proceed, reply FORCE \(in capitals as shown\).
  read
  if [ "$REPLY" != "FORCE" ]; then
    echo [$SCRIPT]: Good choice.
    exit
  fi
fi

[ "$DEBUG" = y ] && echo [$SCRIPT]: Comparable version $VERSION = $COMPVER

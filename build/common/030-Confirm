show_setting() {
  local _TXT="$1"
  local _OPT="-$2"
  local _VAL
  local _ABL

  case "$2" in
    c)  _ABL="$3"; _VAL="$(echo $3 | cut -c1)";;
    d)  case "$3" in
          y)  case "$DFLT_USR" in
                admin) _VAL="y"; _ABL="Enabled";;
                *)     _VAL="n"; _ABL="Disabled";;
              esac;;
          n)  _OPT=""; _ABL="Unchanged";;
        esac;;
    f)  case "$3" in
          y)  case "$DFLT_USR" in
                1) _VAL="y"; _ABL="Enabled";;
                0) _VAL="n"; _ABL="Disabled";;
              esac;;
          n)  _OPT=""; _ABL="Unchanged";;
        esac;;
    h)  _ABL="$3"
        case "$3" in
          "")            _VAL=""; _OPT=""; _ABL="$VARIANT";;
          $VARIANT-$MAC) _VAL="s";;
          $VARIANT)      _VAL="d";;
          $HOSTNAME)     _VAL="h";;
          *)             _VAL="$3";;
        esac;;
    i)  case "$3" in
          visible) _VAL="y"; _ABL="Visible";;
          hidden)  _VAL="n"; _ABL="Hidden";;
        esac;;
    t)  case "$3" in
          classic)       _VAL="c"; _ABL="Classic";;
          light)         _VAL="l"; _ABL="Light";;
          night)         _VAL="n"; _ABL="Night";;
          telstramodern) _VAL="m"; _ABL="Telstra Modern";;
          telstra)       _VAL="t"; _ABL="Telstra Classic";;
        esac;;
    C)  _VAL="$3"
        case "$3" in
          n) _ABL="Disabled";;
          s) _ABL="Summary only";;
          i) _ABL="Individual charts";;
        esac;;
    L) _VAL=""
        case "$3" in
          y) _ABL="Enabled"; _OPT="";;
          n) _ABL="Disabled";;
        esac;;
    CFG) _VAL=""; _OPT=""
        case "$3" in
          y) _ABL="Enabled";;
          n) _ABL="Already Fixed";;
        esac;;
    OPT) _VAL=""; _OPT=""
         case "$3" in
          y|V) _ABL="Enabled";;
          /*)  _ABL="$3";;
          *)    _ABL="Disabled";;
        esac;;
    *)  case "$3" in
          y|true)  _VAL="y";  _ABL="Enabled";;
          n|false) _VAL="n";  _ABL="Disabled";;
          *)       _VAL="$3"; _ABL="$3";
        esac;;
  esac

  [ "$2" = m -a "$_ABL" = Enabled ] && echo -en "$ORANGE"
  echo $1 | grep -qi reboot && [ "$_ABL" = Enabled ] && echo -en "$RED"
  printf "[$SCRIPT]:  %-35s %-2s%-10s" "$_TXT" "$_OPT" "$_VAL" 
  echo -e "$_ABL${NC}"
}

if [ $ABORT = n ]; then
  if [ -z "$INSTALLED_RELEASE" ]; then
    echo -e "[$SCRIPT]: ${GREEN}Installing tch-gui-unhide release ${ORANGE}$RELEASE${NC}"
  else
    echo -e "[$SCRIPT]: ${GREEN}Replacing tch-gui-unhide release ${ORANGE}$INSTALLED_RELEASE${GREEN} with ${ORANGE}$RELEASE${NC}"
  fi
else
  echo -e "[$SCRIPT]: Installed tch-gui-unhide release: ${ORANGE}$INSTALLED_RELEASE${NC}"
  echo -e "[$SCRIPT]: Installer tch-gui-unhide release: ${ORANGE}$RELEASE${NC}"
fi

echo -e "[$SCRIPT]: ${CYAN}Theme Options${NC}"
  show_setting "Theme"                                "t" "$THEME"
  show_setting "Theme highlight colour"               "c" "$COLOR"
  show_setting "Card background icons"                "i" "$ICONS"
  show_setting "Number of cards across wide screens"  "a" "$ACROSS"
  show_setting "Browser tabs title"                   "h" "$TITLE"
if [ -f /www/docroot/landingpage.lp ]; then
  show_setting "Keep Telstra landing page"            "l" "$KEEPLP"
fi
  show_setting "Chart cards"                          "C" "$CHART_CARDS"
  show_setting "Custom logo.gif"                      "L" "$CUSTOM_LOGO"
echo -e "[$SCRIPT]: ${CYAN}Control Options${NC}"
  show_setting "Background updating of cards"         "b" "$BG_RFRSH"
  show_setting "Decrypt SIP Profile passswords"       "p" "$SIP_PWDS"
  show_setting "Show 'Update Available' button"       "v" "$UPDATE_BTN"
for x in $XTRAS; do
  show_setting "Download extra feature script"        "x" "$x"
done
  show_setting "Minify GUI Lua code"                  "m" "$MINIFY"
echo -e "[$SCRIPT]: ${CYAN}Configuration Options${NC}"
  show_setting "Default User"                         "d" "$FIX_DFLT_USR"
  show_setting "Firmware Upgrade in GUI"              "f" "$FIX_FW_UPGRD"
echo -e "[$SCRIPT]: ${CYAN}Installation Options${NC}"
  show_setting "Verbose messages"                     "OPT" "$VERBOSE"
  show_setting "Debugging"                            "OPT" "$DEBUG"
  show_setting "Restore from base directory"          "OPT" "$RESTORE_BASE"
  show_setting "Restart services"                     "OPT" "$RESTART_SERVICES"
  show_setting "Reboot after install"                 "OPT" "$REBOOT"
echo -e "[$SCRIPT]: ${CYAN}Configuration Changes${NC}"
  show_setting "Fix LAN SSH access"                   "CFG" "$FIX_SSH"
  show_setting "Allow GUI config export/import"       "CFG" "$FIX_CFG_PORT"
  show_setting "Allow Parental Block admin"           "CFG" "$FIX_PARENT_BLK"
  show_setting "Prevent root loss on GUI RTFD"        "CFG" "y"

if [ "$MINIFY" = y ]; then
  echo -e "[$SCRIPT]: ${ORANGE}WARNING! Experimental Lua GUI code minification is enabled!${NC}"
fi
if [ "$RESTORE_BASE" != "/rom" ]; then
  echo -e "[$SCRIPT]: ${ORANGE}WARNING! Stock GUI files will be restored from $RESTORE_BASE rather than /rom!${NC}"
fi
if [ "$REBOOT" = y ]; then
  echo -e "[$SCRIPT]: ${RED}WARNING! System will be REBOOTED after installation!!${NC}"
fi

if [ $ABORT = y ]; then
  echo -e "[$SCRIPT]: Installation aborted as requested"
  unlock normally
elif [ $YES = y ]; then
  REPLY=y
else
  echo -en "[$SCRIPT]: ${GREEN}If you wish to proceed, enter y otherwise just press [Enter] to stop:${NC} "
  read
fi
if [ "$REPLY" == "x" ]; then
  REPLY=y
  set -x
  set
elif [ "$REPLY" != "y" -a "$REPLY" != "Y" ]; then
  unlock normally
fi

echo -e "[$SCRIPT]: Attempting to acquire lock on $LOCK..."
lock $LOCK

echo -e "[$SCRIPT]: IMPORTANT NOTE - You can restore changed GUI files to their original state by running: ${GREEN}$0 -r${NC}"


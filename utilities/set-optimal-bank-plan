#!/bin/sh

SCRIPT="$(basename $0)"

if [ "o$1" = "o-?" ]; then
cat <<EOH
Sets the optimal bank plan.

Effectively the same as the procedure described in
https://hack-technicolor.rtfd.io/en/stable/Hacking/PostRoot/#bank-planning.

Usage: $0

EOH
exit
fi

GREEN='\033[1;32m'
ORANGE='\033[0;33m'
RED='\033[0;31m'
NC='\033[0m' # No Color

echo -e "${ORANGE}Ensuring the banks match in size...${NC}"
BANK_COUNT=$(grep -c bank_ /proc/mtd)
if [ $BANK_COUNT -ne 2 ]; then
  echo -e "${RED}==> ABORTING: Unexpected bank count - Expected 2 but found ${BANK_COUNT}!${NC}"
  exit 2
fi

BANK1_SIZE="$(grep bank_1 /proc/mtd | cut -d' ' -f2)"
BANK2_SIZE="$(grep bank_2 /proc/mtd | cut -d' ' -f2)"
if [ "$BANK1_SIZE" != "$BANK2_SIZE" ]; then
  echo -e "${RED}==> ABORTING: Bank 1 and Bank 2 are different sizes??${NC}"
  echo " - Bank 1 = $BANK1_SIZE"
  echo " - Bank 2 = $BANK2_SIZE"
  exit 2
else
  echo -e "${GREEN}==> OKAY: Bank 1 = ${BANK1_SIZE} Bank 2 = ${BANK2_SIZE}${NC}"
fi

echo -e "${ORANGE}Checking active and booted banks...${NC}"
ACTIVE="$(cat /proc/banktable/active 2>/dev/null)"
BOOTED="$(cat /proc/banktable/booted 2>/dev/null)"
if [ -z "$ACTIVE" -o -z "$BOOTED" ]; then
  echo -e "${RED}==> ABORTING: Cannot determine active or booted bank!!${NC}"
  exit 2
elif [ "$ACTIVE" = "bank_1" -a "$BOOTED" = "bank_2" ]; then
  echo -e "${GREEN}==> EXITING: Bank Plan is already OPTIMAL!!${NC}"
  exit
else
  echo -e "${GREEN}==> OKAY: Active = ${ACTIVE} Booted = ${BOOTED}${NC}"
fi

echo -e "${ORANGE}Checking firmware versions...${NC}"
ACTIVE_VERSION="$(cat /proc/banktable/activeversion 2>/dev/null)"
PASSIVE_VERSION="$(cat /proc/banktable/passiveversion 2>/dev/null)"
[ -z "$ACTIVE_VERSION" ] && ACTIVE_VERSION=$(uci get env.var.friendly_sw_version_activebank)
[ -z "$PASSIVE_VERSION" ] && PASSIVE_VERSION=$(uci get env.var.friendly_sw_version_passivebank)

if [ "$BOOTED" = "bank_2" -a "$ACTIVE_VERSION" = "Unknown" ]; then
  echo -e "${RED}==> ABORTING: Firmware version in bank_1 is Unknown!!${NC}"
  exit 2
else
  echo -e "${GREEN}==> Active  = ${ACTIVE_VERSION}${NC}"
  echo -e "${GREEN}==> Passive = ${PASSIVE_VERSION}${NC}"
fi

echo -n "Enter y to attempt to set the optimal bank plan, or anything else to exit now: "
read
if [ "$REPLY" = "y" -o "$REPLY" = "Y" ]; then
  if [ "$BOOTED" = "bank_1" ]; then
    echo -e "${ORANGE}Copying bank_1 firmware into bank_2...${NC}"
    mtd -e bank_2 write /dev/$(grep bank_1 /proc/mtd | cut -d: -f1) bank_2
    echo -e "${ORANGE}Verifying firmware copy...${NC}"
    HASHES=$(sha256sum $(grep bank_ /proc/mtd | cut -d: -f1 | xargs -n1 echo /dev | tr ' ' '/'))
    if [ $(echo "$HASHES" | cut -d' ' -f1 | sort -u | wc -l) -eq 1 ]; then
      echo -e "${GREEN}==> Copy successful!${NC}"
      ACTIVE_VERSION="$(cat /proc/banktable/activeversion 2>/dev/null)"
      PASSIVE_VERSION="$(cat /proc/banktable/passiveversion 2>/dev/null)"
      [ -z "$ACTIVE_VERSION" ] && ACTIVE_VERSION=$(uci get env.var.friendly_sw_version_activebank)
      [ -z "$PASSIVE_VERSION" ] && PASSIVE_VERSION=$(uci get env.var.friendly_sw_version_passivebank)
      echo -e "${GREEN}==> Active  = ${ACTIVE_VERSION}${NC}"
      echo -e "${GREEN}==> Passive = ${PASSIVE_VERSION}${NC}"
      echo -e "${ORANGE}Making a temporary copy of the overlay for the booted firmware...${NC}"
      cp -rf /overlay/$(cat /proc/banktable/booted) /tmp/bank_overlay_backup
      echo -e "${ORANGE}Cleaning up jffs2 space by removing any existing old overlays...${NC}"
      rm -rf /overlay/*
      echo -e "${ORANGE}Using the previously made temp copy as overlay for bank_2...${NC}"
      cp -rf /tmp/bank_overlay_backup /overlay/bank_2
    else
      echo -e "${RED}==> ABORTING: Verification of bank copy FAILED!${NC}"
      echo "$HASHES"
      exit 2
    fi
  else
    echo -e "${GREEN}==> Already booted from bank_2 - Firmware copy ${ORANGE}NOT REQUIRED${NC}"
    echo -e "${ORANGE}Cleaning up jffs2 space by removing any existing old bank_1 overlay...${NC}"
    rm -rf /overlay/bank_1
  fi
  echo -e "${ORANGE}Activating bank_1...${NC}"
  echo bank_1 > /proc/banktable/active
  echo -e "${ORANGE}Making sure changes are synced to flash memory...${NC}"
  sync
  echo -e "${ORANGE}Erasing firmware in bank_1...${NC}"
  mtd erase bank_1
  echo -e "${GREEN}"
  echo "################################################"
  echo "# Operation Complete.                          #"
  echo "#                                              #"
  echo "# About to emulate system crash to hard reboot #"
  echo "# for the new bank plan to take effect!        #"
  echo "################################################"
  echo -e "${NC}"
  echo c > /proc/sysrq-trigger;
fi

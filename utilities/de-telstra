#!/bin/sh
# Make sure that we are running on Telstra firmware
if [ "$(uci -q get env.var._provisioning_code)" != "Telstra" ]; then
  echo "ERROR! This script is intended for devices with Telstra firmware. Exiting"
  exit 1
fi

# Based on https://hack-technicolor.readthedocs.io/en/stable/Hardening/

SCRIPT="$(basename $0)"

VERSION=$(uci -q get version.@version[0].marketing_version)
VARIANT=$(uci -q get env.var.variant_friendly_name | sed -e 's/TLS//')
MAC_HEX=$(uci -q get env.var.ssid_mac_postfix_r0)

cat /proc/cpuinfo | grep -q 'ARMv7 Processor rev 1 (v7l)' && ARMv7=1 || ARMv7=0

GREEN='\033[1;32m'
GREY='\033[90m'
ORANGE='\033[0;33m'
RED='\033[0;31m'
NC='\033[0m' # No Color

RESTART_SERVICES=y
SAVE_DEFAULTS=n
SHOW_DEFAULTS=n

# Keep count of changes so we know whether to restart services
SRV_bulkdata=0
SRV_cups=0
SRV_cwmp=0
SRV_dhcp=0
SRV_dlna=0
SRV_dropbear=0
[ -e /etc/init.d/dumaos ] && SRV_dumaos=0 ||  SRV_dumaos=-1
SRV_fw=0
SRV_hotspot=0
SRV_iqos=0
SRV_intercept=0
SRV_ledfw=0
SRV_mmpbxd=0
SRV_mobiled=0
SRV_monitor=0
SRV_mountd=0
[ -e /etc/config/multiap ] && SRV_multiap=0 || SRV_multiap=-1
[ -e /etc/config/mesh_broker ] && SRV_mesh_broker=0 || SRV_mesh_broker=-1
SRV_network=0
[ -e /etc/config/nfc ] && SRV_nfc=0 || SRV_nfc=-1
SRV_nginx=0
SRV_ntp=0
SRV_qos=0
[ -e /etc/config/qos_tch ] && SRV_qos_tch=0 || SRV_qos_tch=-1
SRV_samba=0
uci -q get supervision && SRV_supervision=0 || SRV_supervision=-1
SRV_system=0
SRV_upnp=0
SRV_wansensing=0
SRV_watchdog=0
SRV_wifi=0

usage() {
cat <<EOH
Hardens root access and applies optional service configuration changes.

Usage: $0 [options]

Options:
 -k a|c|e|k|m|n|q|s|x  Override default hardening configuration:
    where a            - Keep Telstra AIR enabled
          c            - Keep CWMP installed
          k            - Keep default public authorized keys
          l            - Keep Telstra APN check
          m            - Keep Telstra monitoring and data collection enabled
          n            - Keep Telstra NTP servers
          q            - Keep Telstra QoS VoWiFi reclassify rules
          s            - Keep WAN Supervision as BFD
          x            - Keep noexec on ext2/3/4, fat, hfsplus, hfsplusjournal
                          and ntfs filesystems (i.e. prevent execution of
                          scripts/programs on USB devices)
          T            - Keep all default Telstra configuration (Equivalent
                          to: -ka -kc -kk -kl -km -kn -kq -ks -kx)
 -h u|d|s|<hostname>
    where u            Leave hostname unchanged
          d            Set the hostname to $VARIANT
          s            Set the hostname to $VARIANT-$MAC_HEX
          <hostname>   Use the specified hostname
 -d u|g|l|<domainname>
    where u            Leave domain name unchanged
          g            Set the domain name to gateway
          l            Set the domain name to lan
          <domainname> Set the domain name to <domainname>
 -n u|a|c|g|f|o|<n.n.n.n>
    where u            Leave DNS servers unchanged
          a            Automatically use the DNS servers from the ISP
          c            Set the DNS servers to Cloudflare
          g            Set the DNS servers to Google
          f            Set the DNS servers to OpenDNS Family Shield
          o            Set the DNS servers to OpenDNS
          <n.n.n.n>    Set the DNS servers to 1 or 2 comma-separated
                        IPv4 addresses (e.g. 8.8.8.8,1.1.1.1)
 -a u|y|n              ALG NAT Helpers:         u=Unchanged y=Enable n=Disable
 -c u|y|n              Content Sharing:         u=unchanged y=Enable n=Disable
 -e u|y|n              DECT Emission Mode:      u=unchanged y=Enable n=Disable
 -f u|y|n              File Sharing:            u=unchanged y=Enable n=Disable
 -g u|y|n            * DumaOS (Game Optimiser): u=unchanged y=Enable n=Disable
 -i u|y|n              Intercept Daemon:        u=unchanged y=Enable n=Disable
 -l u|y|n            * LED logging:             u=unchanged y=Enable n=Disable
 -m u|a|b|c|v|y|n    * MultiAP (EasyMesh):      u=unchanged a=Enable Agent
                                                            b=Enable BackHaul SSID
                                                            c=Enable Controller 
                                                            v=Enable Vendor Extensions
                                                            y=same as -ma -mb -mc -mv
                                                            n=Disable
 -p u|y|n|d            Power Saving:            u=unchanged y=Enable n=Disable d=Default
 -q u|y|n            * NFC:                     u=unchanged y=Enable n=Disable
 -r u|y|n              Printer Sharing:         u=unchanged y=Enable n=Disable
 -s u|b|d|n            WAN Supervision:         u=unchanged b=BFD d=DNS n=Disable
 -t u|y|n              Telephony:               u=unchanged y=Enable n=Disable
 -u u|y|n              UPnP Service:            u=unchanged y=Enable n=Disable
 -w u|y|n              WPS:                     u=unchanged y=Enable n=Disable
                         (on non-Guest and non-Backhaul SSIDs)
 -F u|y|n              RTFD root protection:    u=unchanged y=Enable n=Disable
                         NOTE: tch-gui-unhide will ALWAYS enable RTFD protection
 -I n.n.n.n            Set the LAN IPv4 address to n.n.n.n
 -A                    Equivalent to: -hd -dg -an -cn -fn -ln -in -rn -sd -un -wn -Fy
 -S                    Equivalent to: -hs -dg -an -cn -fn -ln -in -rn -sd -un -wn -Fy
 -M                    Minimum memory mode: Equivalent to:
                           -an -cn -fn -in -rn -tn -en -un -mn -gn -qn -Fy
                         PLUS stops and disables the associated services
 -G                    Removes the Guest Wi-Fi SSIDs, firewall rules/zones, and guest networks
 -R                    Reset to device defaults: Equivalent to:
                         -hmymodem -dmodem -na -ay -cy -fy -iy -pd -ry -ty -ey -uy -my -gy -qy -wy -Fn -sb
 -o                    Configures opkg
 -O 17|18|19           Overrides the default opkg repository with the specified version
 -U                    Download the latest version of $SCRIPT from GitHub
 -y                    Bypass the confirmation prompt (answers 'y')
 --save-defaults       Saves the command line options as defaults for future executions
                         When specified, NO changes are applied to the device
 --show-defaults       Shows the settings that would be applied (defaults and over-rides)
                         When specified, NO changes are applied to the device
 --no-defaults         Ignores any saved defaults for this execution
 --no-service-restart  Do NOT restart services after applying configuration changes
 --no-password-remind  Do NOT remind to change root password

NOTE #1:  Default for all optional parameters is u (unchanged)
NOTE #2:  Options marked with * are only applicable if the service is installed
NOTE #3:  Shortcut options (e.g. -A, -S, -M and -R) can have their settings overriden 
          by specifying the required option AFTER the shortcut option. For example, 
          the -A option disables Content Sharing (-cn). However, you can specify -A -cy 
          to enable Content Sharing and still apply all the other options implied by -A.

EOH

if [ -n "$1" ]; then
  local index=$(( $1 - 1 ))
  echo -e "${ORANGE}ERROR! Parameter $index is an unknown option!${NC}"; 
  echo
fi
exit
}

upgrade() {
  RESPONSE_CODE=$(curl -kLsI -o /dev/null -w '%{http_code}' https://raw.githubusercontent.com/seud0nym/tch-gui-unhide/master/utilities/$SCRIPT)
  if [ "$RESPONSE_CODE" = 200 ]; then
    curl -kL -o $SCRIPT https://raw.githubusercontent.com/seud0nym/tch-gui-unhide/master/utilities/$SCRIPT
    if [ $? -eq 0 ]; then
      chmod +x $SCRIPT
      echo "[$SCRIPT] Successfully downloaded $SCRIPT."
    else
      echo "[$SCRIPT] Failed to download $SCRIPT."
    fi
  elif [ "$RESPONSE_CODE" = 404 ]; then
    echo "[$SCRIPT] ERROR! Not found on GitHub???"
  elif [ "$RESPONSE_CODE" = 000 ]; then
    echo "ERROR! No Internet connection???"
  else
    echo "[$SCRIPT] ERROR! Unknown response code $RESPONSE_CODE"
  fi
  exit
}

# Options
set_defaults() {
  __ALG='u'
  __DECT='u'
  __DLNAD='u'
  __DOMAIN='u'
  __DUMAOS='u'
  __GUEST='n'
  __HOST='u'
  __INTERCEPT='u'
  __IPADDR=''
  __LED_LOG='u'
  __LITE='n'
  __MMPBX='u'
  __MULTIAP_AGT='u'
  __MULTIAP_BKH='u'
  __MULTIAP_CTL='u'
  __MULTIAP_VND='u'
  __NFC='u'
  __NS='u'
  __OPKG='n'
  __POWER='u'
  __PRNTR='u'
  __REPO=""
  __ROOT_PROTECT='u'
  __SAMBA='u'
  __SUPERVISION='u'
  __UPNP='u'
  __WPS='u'
  # Overrides
  __AIR='n'
  __CWMP='n'
  __KEYS='n'
  __LTE='n'
  __MONITORING='n'
  __NTP='n'
  __NOEXEC='n'
  __QoS='n'
  __ROOT_PWD_REMINDER='y'
  __VERBOSE="-q"
  __YES='n'
}

set_defaults
if [ -f .defaults.de-telstra ]; then
  . ./.defaults.de-telstra
fi

[ "/$1/" = "/-?/" -o "/$1/" = "/--help/" ] && usage

while getopts :a:b:c:d:e:f:g:h:i:k:l:m:n:op:q:r:s:t:u:w:yAF:GI:MO:RSU-: option; do
 case "${option}" in
  -)  case "${OPTARG}" in
        debug) __VERBOSE="";;
        no-defaults) set_defaults;;
        save-defaults) SAVE_DEFAULTS=y;;
        show-defaults) SHOW_DEFAULTS=y;;
        no-password-remind) __ROOT_PWD_REMINDER=n;;
        no-service-restart) RESTART_SERVICES=n;;
        *) usage $OPTIND;;
      esac;;
  a)  case "${OPTARG}" in y) __ALG='1';; n) __ALG='0';; u) __ALG='u';; *) echo 'ERROR: -a valid options are y, n, or u'; exit 1;; esac;;
  b)  echo 'WARNING: -b option deprecated. Use -a instead!'; exit 1;;
  c)  case "${OPTARG}" in y) __DLNAD='1';; n) __DLNAD='0';; u) __DLNAD='u';; *) echo 'ERROR: -c valid options are y, n, or u'; exit 1;; esac;;
  d)  case "${OPTARG}" in g|G) __DOMAIN='gateway';; l|L) __DOMAIN='lan';; u) __DOMAIN='u';; *) __DOMAIN="${OPTARG}";; esac;;
  e)  case "${OPTARG}" in y) __DECT='1';; n) __DECT='0';; u) __DECT='u';; *) echo 'ERROR: -e valid options are y, n, or u'; exit 1;; esac;;
  f)  case "${OPTARG}" in y) __SAMBA='1';; n) __SAMBA='0';; u) __SAMBA='u';; *) echo 'ERROR: -f valid options are y, n, or u'; exit 1;; esac;;
  g)  case "${OPTARG}" in y) __DUMAOS='1';; n) __DUMAOS='0';; u) __DUMAOS='u';; *) echo 'ERROR: -g valid options are y, n, or u'; exit 1;; esac;;
  h)  __HOST=${OPTARG};;
  i)  case "${OPTARG}" in y) __INTERCEPT='1';; n) __INTERCEPT='0';; u) __INTERCEPT='u';; *) echo 'ERROR: -i valid options are y, n, or u'; exit 1;; esac;;
  k)  case "${OPTARG}" in a) __AIR='y';; c) __CWMP='y';; k) __KEYS='y';; l) __LTE='y';; m) __MONITORING='y';; n) __NTP='y';; q) __QoS='y';; s) __SUPERVISION='BFD';; x) __NOEXEC='y';; T) __LTE='y'; __KEYS='y'; __CWMP='y'; __MONITORING='y'; __AIR='y'; __NTP='y'; __QoS='y'; __SUPERVISION='BFD'; __NOEXEC='y';; *) echo "ERROR: Unknown override option $OPTARG"; exit 1;; esac;;
  l)  case "${OPTARG}" in y) __LED_LOG='1';; n) __LED_LOG='0';; u) __LED_LOG='u';; *) echo 'ERROR: -l valid options are y, n, or u'; exit 1;; esac;;
  m)  case "${OPTARG}" in a) __MULTIAP_AGT='1';; b) __MULTIAP_BKH='1';; c) __MULTIAP_CTL='1';; v) __MULTIAP_VND='1';; y) __MULTIAP_AGT='1'; __MULTIAP_BKH='1'; __MULTIAP_CTL='1'; __MULTIAP_VND='1';; n) __MULTIAP_AGT='0'; __MULTIAP_BKH='0'; __MULTIAP_CTL='0'; __MULTIAP_VND='0';; u) __MULTIAP_AGT='u'; __MULTIAP_BKH='u'; __MULTIAP_CTL='u'; __MULTIAP_VND='u';; *) echo 'ERROR: -m valid options are a, b, c, v, y, n, or u'; exit 1;; esac;;
  n)  __NS=${OPTARG};;
  o)  __OPKG='y';;
  p)  case "${OPTARG}" in y) __POWER='y';; n) __POWER='n';; u) __POWER='u';; d) __POWER='d';; *) echo 'ERROR: -p valid options are y, n, u or d'; exit 1;; esac;;
  q)  case "${OPTARG}" in y) __NFC='1';; n) __NFC='0';; u) __NFC='u';; *) echo 'ERROR: -q valid options are y, n, or u'; exit 1;; esac;;
  r)  case "${OPTARG}" in y) __PRNTR='1';; n) __PRNTR='0';; u) __PRNTR='u';; *) echo 'ERROR: -r valid options are y, n, or u'; exit 1;; esac;;
  s)  case "${OPTARG}" in b|B) __SUPERVISION='BFD';; d|D) __SUPERVISION='DNS';; n) __SUPERVISION='Disabled';; u) __SUPERVISION='u';; *) echo 'ERROR: -s valid options are b, d, n, or u'; exit 1;; esac;;
  t)  case "${OPTARG}" in y) __MMPBX='1';; n) __MMPBX='0';; u) __MMPBX='u';; *) echo 'ERROR: -t valid options are y, n, or u'; exit 1;; esac;;
  u)  case "${OPTARG}" in y) __UPNP='1';; n) __UPNP='0';; u) __UPNP='u';; *) echo 'ERROR: -u valid options are y, n, or u'; exit 1;; esac;;
  w)  case "${OPTARG}" in y) __WPS='1';; n) __WPS='0';; u) __WPS='u';; *) echo 'ERROR: -w valid options are y, n, or u'; exit 1;; esac;;
  y)  __YES='y';;
  A)  __HOST='d'; __DOMAIN='gateway'; __ALG='0'; __DLNAD='0'; __SAMBA='0'; __PRNTR='0'; __UPNP='0'; __WPS='0'; __ROOT_PROTECT='1'; __SUPERVISION='DNS'; __INTERCEPT='0'; __LED_LOG='0';;
  F)  case "${OPTARG}" in y) __ROOT_PROTECT='1';; n) __ROOT_PROTECT='0';; u) __ROOT_PROTECT='u';; *) echo 'ERROR: -F valid options are y, n, or u'; exit 1;; esac;;
  G)  __GUEST='y';;
  I)  if  echo "${OPTARG}" | grep -q -E "([^.]|^)([0-9]{1,2}|1[0-9]{2}|2[0-4][0-9]|25[0-5]).([0-9]{1,2}|1[0-9]{2}|2[0-4][0-9]|25[0-5]).([0-9]{1,2}|1[0-9]{2}|2[0-4][0-9]|25[0-5]).([0-9]{1,2}|1[0-9]{2}|2[0-4][0-9]|25[0-5])([^.]|$)"; then
        __IPADDR="${OPTARG}"
      else
        echo "ERROR! Invalid IP address: $OPTARG$"
        exit 1
      fi;;
  M)  __LITE='y'; __ALG='0'; __DECT='0'; __DLNAD='0'; __DUMAOS='0'; __INTERCEPT='0' __MMPBX='0'; __MULTIAP_AGT='0'; __MULTIAP_BKH='0'; __MULTIAP_CTL='0'; __NFC='0'; __PRNTR='0'; __SAMBA='0'; __UPNP='0'; __WPS='0'; __ROOT_PROTECT='1';;
  O)  case "${OPTARG}" in 17|18|19) __REPO=$OPTARG;; *) echo 'ERROR: -O valid options are 17, 18 or 19'; exit 1;; esac;;
  R)  __LITE='R'; __HOST='mymodem'; __DOMAIN='modem'; __NS='a'; __ALG='1'; __DLNAD='1'; __DUMAOS='0'; __SAMBA='1'; __MULTIAP_AGT='1'; __MULTIAP_BKH='1'; __MULTIAP_CTL='1'; __POWER='d'; __PRNTR='1'; __MMPBX='1'; __DECT='1'; __UPNP='1'; __ROOT_PROTECT='0'; __NFC='y'; __SUPERVISION='BFD'; __INTERCEPT='1';;
  S)  __HOST='s'; __DOMAIN='gateway'; __ALG='0'; __DLNAD='0'; __SAMBA='0'; __PRNTR='0'; __UPNP='0'; __WPS='0'; __ROOT_PROTECT='1'; __SUPERVISION='DNS'; __INTERCEPT='0'; __LED_LOG='0';;
  U)  upgrade;;
  *)  usage $OPTIND;;
 esac
done

HOMEWARE=$(uci -q get version.@version[0].version | cut -d. -f1)
if [ "$HOMEWARE" -eq 20 ]; then
  # macoers now has a FW 19 repository, but it is only in testing
  # if [ $(grep -c 'homeware/18/' /etc/opkg/customfeeds.conf) -gt 0 ]; then
  #   echo [$SCRIPT]: Updating opkg repository from FW 18 to FW 19...
  #   sed -e 's|homeware/18/|homeware/19/|' -i /etc/opkg/customfeeds.conf
  # fi
  HOMEWARE=18
fi

show_default() {
  local _DFLT
  local _OPT=$1
  local _ESC=1
  case "$1" in
    ka|kc|kk|kl|km|kn|kq|kx|M|G|o) _OPT="$1"; [ "$3" = "n" ] && _ESC=9;;
    s) case "$3" in BFD) _OPT="sb";; DNS) _OPT="sd";; Disabled) _OPT="sn";; *) _OPT='su';; esac;;
    *) case "$3" in 0) _OPT="${1}n";; 1) _OPT="${1}y";; *) _OPT="$1$3";; esac;;
  esac
  case "$3" in
    u) _DFLT=Unchanged;;
    0) _DFLT=Disabled;;
    1) if [ "$1" = "m" ]; then 
        case "$2" in
          *Agen*) _OPT="ma";;
          *Back*) _OPT="mb";;
          *Cont*) _OPT="mc";;
          *Vend*) _OPT="mv";;
        esac
       fi
       _DFLT=Enabled
       ;;
    y) _DFLT=Yes;;
    n) _DFLT=No;;
    d) _DFLT="System Default";;
    *) if [ "$1" = "h" ]; then
        case "$3" in
          d) _DFLT="$VARIANT";;
          s) _DFLT="$VARIANT-$MAC_HEX";;
          *) _DFLT="$3";;
        esac
      elif [ "$1" = "n" ]; then
        case "$3" in
          a) _DFLT="From ISP";;
          c) _DFLT="Cloudflare";;
          g) _DFLT="Google";;
          f) _DFLT="OpenDNS Family Shield";;
          o) _DFLT="OpenDNS";;
          *) _DFLT="$3";;
        esac
      elif [ "$1" = 'I' ]; then
        [ -z "$3" ] && _DFLT=Unchanged || _DFLT="$3"
      elif [ "$1" = 'O' ]; then
        _DFLT="$HOMEWARE"
        [ -z "$3" ] && _OPT="O$HOMEWARE"
      else
        _DFLT="$3"
      fi;;
  esac
  _OPT="$(printf '-%-20s' "$_OPT\e[0m")"
  printf "  %-40s " "$2"
  if [ $_ESC = 9 ]; then
    echo -e "\e[9m$_OPT $_DFLT"
  else
    echo -e "\e[1m$_OPT $_DFLT"
  fi
}

if [ $SAVE_DEFAULTS = y -o $SHOW_DEFAULTS = y -o $__YES = n ]; then
  [ "$VERSION" = "17.2" -o "$VERSION" = "18.1.c" ] && show_default "ka" "Keep Telstra AIR enabled" $__AIR
  show_default "kc" "Keep CWMP installed" $__CWMP
  show_default "kk" "Keep default public authorized keys" $__KEYS
  show_default "kl" "Keep Telstra APN check" $__LTE
  show_default "km" "Keep Telstra monitoring/data collection" $__MONITORING
  show_default "kn" "Keep Telstra NTP servers" $__NTP
  show_default "kq" "Keep Telstra QoS VoWiFi reclassify rules" $__QoS
  show_default "kx" "Keep noexec on filesystems" $__NOEXEC
  show_default "h"  "Host name" $__HOST
  show_default "d"  "Domain name" $__DOMAIN
  show_default "n"  "DNS servers" $__NS
  show_default "a"  "NAT ALG Helpers" $__ALG
  show_default "c"  "Content Sharing" $__DLNAD
  [ -e /etc/init.d/mmpbxbrcmdect ] && show_default "e"  "DECT Emission Mode" $__DECT
  show_default "f"  "File Sharing" $__SAMBA
  [ $SRV_dumaos -ge 0 ] && show_default "g"  "DumaOS (Game Optimiser)" $__DUMAOS
  show_default "i"  "Intercept Daemon" $__INTERCEPT
  show_default "l"  "LED Logging" $__LED_LOG
  [ $SRV_multiap -ge 0 -o $SRV_mesh_broker -ge 0 ] && show_default "m"  "EasyMesh Agent" $__MULTIAP_AGT
  [ $SRV_multiap -ge 0 -o $SRV_mesh_broker -ge 0 ] && show_default "m"  "EasyMesh Controller" $__MULTIAP_CTL
  [ $SRV_multiap -ge 0 -o $SRV_mesh_broker -ge 0 ] && show_default "m"  "EasyMesh BackHaul SSID" $__MULTIAP_BKH
  [ $SRV_multiap -ge 0 ] && show_default "m"  "MultiAP (EasyMesh) Vendor Extensions" $__MULTIAP_VND
  show_default "p"  "Power Saving" $__POWER
  [ $SRV_nfc -ge 0 ] && show_default "q"  "NFC" $__NFC
  show_default "r"  "Printer Sharing" $__PRNTR
  [ $SRV_supervision -ge 0 ] && show_default "s"  "WAN Supervision" $__SUPERVISION
  show_default "t"  "Telephony" $__MMPBX
  show_default "u"  "UPnP" $__UPNP
  show_default "w"  "WPS" $__WPS
  show_default "F"  "RTFD root protection" $__ROOT_PROTECT
  show_default "M"  "Minimum memory mode" $__LITE
  show_default "G"  "Remove Guest Wi-Fi" $__GUEST
  show_default "I"  "LAN IPv4 Address" $__IPADDR
  [ $ARMv7 -eq 1 ] && show_default "o"  "Configure opkg" $__OPKG
  [ $ARMv7 -eq 1 ] && show_default "O"  " - opkg repository" $__REPO
  [ $SHOW_DEFAULTS = y ] && exit
  if [ $SAVE_DEFAULTS = y ]; then
    set | grep '^__' > .defaults.de-telstra
    echo -e "[$SCRIPT]: \e[1;32mDefaults saved\e[0m"
    exit
  fi
  [ $RESTART_SERVICES = n ] && echo -e "[$SCRIPT]: \e[0;33mServices will NOT be restarted after configuration applied!\e[0m"
  echo -en "[$SCRIPT]: \e[1;32mApply changes? Enter y to confirm otherwise just [Enter] to exit: \e[0m"
  read
  [ "$REPLY" != "y" -a "$REPLY" != "Y" ] && exit
fi

status2text() {
  if [ "$1" = "0" -o "$1" = "no" ]; then
    echo Disabled
  else
    echo Enabled
  fi
}

LOCK="/var/run/${SCRIPT}.lck"
unlock() { 
  if [ "$1" != "normally" ]; then
    echo
    echo "[$SCRIPT]: Ctrl-C caught...performing clean up"
  fi

  echo "[$SCRIPT]: Releasing lock on $LOCK..."
  lock -u $LOCK
  [ -f $LOCK ] && rm $LOCK

  [ "$1" = "normally" ] && exit || exit 2
}
trap "unlock" 2

echo "[$SCRIPT]: Attempting to acquire lock on $LOCK..."
lock $LOCK

PACKAGES_TO_REMOVE=""

exec_uci() {
  local command="$1"
  shift
  local arguments="$*"
  local path="$(echo "$arguments" | cut -d= -f1)"
  local value="$(echo "$arguments" | cut -d= -f2)"
  local retval

  if [ "$path" = "$value" ]; then
    [ -z "$__VERBOSE" ] && echo -e "[$SCRIPT]: ${GREY} -> uci $__VERBOSE ${command} ${path}${NC}"
    uci $__VERBOSE ${command} ${path} > /dev/null
    retval=$?
  else
    [ -z "$__VERBOSE" ] && echo -e "[$SCRIPT]: ${GREY} -> uci $__VERBOSE ${command} ${path}=\"$value\"${NC}"
    uci $__VERBOSE ${command} ${path}="$value"
    retval=$?
  fi
  if [ "$retval" != "0" ]; then
    echo -e "[$SCRIPT]: ${ORANGE}WARNING - failed to execute${NC} uci $__VERBOSE ${command} $arguments"
  fi
}

echo [$SCRIPT]: Applying default hardening rules...

# CWMP
CWMPD_LOG=$(uci -q show system | grep -i cwmp | cut -d. -f1-2 | sort -u)
CWMPD_WANS=$(grep "^ *set_cwmpd" /usr/lib/lua/wansensingfw/failoverhelper.lua | wc -l)
CWMPD_IQOS=$(uci -q show iqos | grep "target='cwmpd'" | cut -d. -f1-2)
if [ "$(uci -q get cwmpd.cwmpd_config.state)" -eq "1" -o -e /etc/init.d/cwmpd -o -n "$CWMPD_IQOS" -o $CWMPD_WANS -gt 0 -o -n "$CWMPD_LOG" ]; then
  if [ "$__CWMP" = 'n' ]; then
    echo [$SCRIPT]: - Disabling CWMP
    exec_uci set cwmpd.cwmpd_config.state='0'
    exec_uci commit cwmpd
    SRV_cwmp=$(( $SRV_cwmp + 1 ))
    if [ -n "$(uci -q get firewall.cwmpd)" ]; then
      exec_uci delete firewall.cwmpd
      exec_uci commit firewall
      SRV_fw=$(( $SRV_fw + 1 ))
    fi
    exec_uci del_list watchdog.@watchdog[0].pidfile='/var/run/cwmpd.pid'
    exec_uci del_list watchdog.@watchdog[0].pidfile='/var/run/cwmpevents.pid'
    exec_uci commit watchdog
    SRV_watchdog=$(( $SRV_watchdog + 2 ))
    if [ -n "$CWMPD_IQOS" ]; then
      echo [$SCRIPT]: - Removing CWMPD Ingress QoS settings
      exec_uci delete $CWMPD_IQOS
      exec_uci commit iqos
      SRV_iqos=$(( $SRV_iqos + 1 ))
    fi
    if [ $CWMPD_WANS -gt 0 ]; then
      echo [$SCRIPT]: - Disabling CWMP in WAN Sensing failover
      sed -e 's/^\( *set_cwmpd\)/-- \1/' -i /usr/lib/lua/wansensingfw/failoverhelper.lua
    fi
    if [ -n "$CWMPD_LOG" ]; then
      echo [$SCRIPT]: - Disabling CWMP logging
      for p in $CWMPD_LOG; do
        CWMPD_LOG_FILES="$CWMPD_LOG_FILES $(uci -q get $p.path)"
        exec_uci delete $p
        SRV_system=$(( $SRV_system + 1 ))
      done
      exec_uci commit system
    fi
    PACKAGES_TO_REMOVE="$PACKAGES_TO_REMOVE conf-cwmpd cwmpd"
  else
    echo [$SCRIPT]: - OVERRIDE! CWMP NOT Disabled
  fi
else
  echo [$SCRIPT]: - CWMP already Disabled
fi

# Telstra Monitoring
WIFI_WANS=$(grep "^ *set_wifi_doctor" /usr/lib/lua/wansensingfw/failoverhelper.lua | wc -l)
WRKR_WANS=$(uci -q show wansensing | grep "@worker\[[0-9]*\]\.enable='1'" | wc -l)
if [ -z "$(uci -q get autoreset.vsparc_enabled)" -a -z "$(uci -q get autoreset.thor_enabled)" -a -z "$(uci -q get wifi_doctor_agent.acs)" -a -z "$(uci -q get wifi_doctor_agent.config)" -a -z "$(uci -q get wifi_doctor_agent.as_config)" -a $WRKR_WANS -eq 0 -a $WIFI_WANS -eq 0 ]; then
  echo [$SCRIPT]: - Telstra monitoring already Disabled
else
  if [ "$__MONITORING" = 'n' ]; then
    echo [$SCRIPT]: - Disabling Telstra monitoring
    if [ -e /etc/config/autoreset ]; then
      echo [$SCRIPT]: - Removing autoreset config
      exec_uci delete autoreset.vsparc_enabled
      exec_uci delete autoreset.thor_enabled
      exec_uci commit autoreset
      SRV_monitor=$(( $SRV_monitor + 2 ))
    fi
    if [ -e /etc/config/wifi_doctor_agent ]; then
      echo [$SCRIPT]: - Removing WiFi Doctor config
      [ -n "$(uci -q get wifi_doctor_agent.acs)" ] && exec_uci delete wifi_doctor_agent.acs
      [ -n "$(uci -q get wifi_doctor_agent.config)" ] && exec_uci delete wifi_doctor_agent.config
      [ -n "$(uci -q get wifi_doctor_agent.as_config)" ] && exec_uci delete wifi_doctor_agent.as_config
      exec_uci commit wifi_doctor_agent
    fi
    SRV_monitor=$(( $SRV_monitor + 3 ))
    if [ $WIFI_WANS -gt 0 ]; then
      echo [$SCRIPT]: - Disabling WiFi Doctor in WAN Sensing failover
      sed -e 's/^\( *set_wifi_doctor\)/-- \1/' -i /usr/lib/lua/wansensingfw/failoverhelper.lua
    fi
    if [ $WRKR_WANS -gt 0 ]; then
      echo [$SCRIPT]: - Disabling WAN Sensing workers
      for worker in $(uci -q show wansensing | grep "@worker\[[0-9]*\]\.enable='1'" | cut -d= -f1); do
        exec_uci set $worker='0'
      done
      exec_uci commit wansensing
      SRV_wansensing=$(( $SRV_wansensing + 1 ))
    fi
    PACKAGES_TO_REMOVE="$PACKAGES_TO_REMOVE libbcmairiq conf-airiq autoreset-tch tls-thor-map wifi-doctor-agent conf-wifi-doctor-agent tr143"
  else
    echo [$SCRIPT]: - OVERRIDE! Telstra monitoring NOT Disabled
  fi
fi

# Telstra logging and data collection
if [ "$__MONITORING" = 'n' ]; then
  if /etc/init.d/lotagent enabled; then
    echo [$SCRIPT]: - Disabling lotagent \(Telstra logging?\)
    /etc/init.d/lotagent stop
    /etc/init.d/lotagent disable
  else
    echo [$SCRIPT]: - lotagent already Disabled
  fi

  if [ "$(uci -q get bulkdata.global.enabled)" = "1" ]; then
    echo [$SCRIPT]: - Disabling bulkdata collection \(More logging?\)
    exec_uci set bulkdata.global.enabled='0'
    exec_uci set bulkdata.profile_1.enabled='0'
    exec_uci commit bulkdata
    SRV_bulkdata=$(( $SRV_bulkdata + 1 ))
  else
    echo [$SCRIPT]: - bulkdata collection already disabled
  fi
  grep -q bulkdata /etc/crontabs/root
  if [ $? -eq 1 ]; then
    echo [$SCRIPT]: - Removing bulkdata cron job
    sed -e '/bulkdata/d' -i /etc/crontabs/root
  else
    echo [$SCRIPT]: - bulkdata cron job already removed
  fi
else
  echo [$SCRIPT]: - OVERRIDE! Telstra logging and data collection NOT Removed
fi

# Telstra AIR
if [ "$VERSION" = "17.2" -o "$VERSION" = "18.1.c" ]; then
  if [ "$__ALG" = "u" ]; then
    ALG_ENABLED=0
    for g in $(uci -q show firewall | grep '\.helper' | cut -d\' -f2); do
      key=$(uci -q show firewall | grep '\.helper' | grep -i "\b$g" | sed 's/\(.*\)\.helper=.*/\1/')
      ALG_ENABLED=$(( $ALG_ENABLED + $(uci -q get $key.enable || echo 1) ))
    done
    echo [$SCRIPT]: ALGs unchanged \[$ALG_ENABLED Enabled\]
  else
    for g in $(uci -q show firewall | grep '\.helper' | cut -d\' -f2); do
      key=$(uci -q show firewall | grep '\.helper' | grep -i "\b$g" | sed 's/\(.*\)\.helper=.*/\1/')
      G=$(echo $g | tr "[a-z]" "[A-Z]")
      G_NOW="$(uci -q get $key.enable || echo 1)"
      if [ "$G_NOW" != "$__ALG" ]; then
        if [ "$__ALG" = "0" ]; then
          echo [$SCRIPT]: $G ALG Disabled
        else
          echo [$SCRIPT]: $G ALG Enabled
        fi
        exec_uci set $key.enable="$__ALG"
        exec_uci commit firewall
        SRV_fw=$(( $SRV_fw + 1 ))
      else
        echo [$SCRIPT]: $G ALG unchanged \[$(status2text $G_NOW)\]
      fi
    done
  fi

  if [ -z "$(uci -q get dhcp.hotspot)" -a -z "$(uci -q get dhcp.fonopen)" -a -z "$(uci -q get network.fonopen)" -a -z "$(uci -q get web.fon)" -a -z "$(uci -q show web.ruleset_main.rules | grep '\bfon\b')" -a -z "$(uci -q show qos.reclassify_1.srcif | grep '\bfonopen\b')" -a -z "$(uci -q show wireless | grep -E ssid=\'\(Fon\|Telstra\ Air\))" -a -z "$(uci -q get wireless.bs2)" -a -z "$(uci -q get wireless.bs3)" ]; then
    echo [$SCRIPT]: - Telstra AIR already removed
  else
    if [ "$__AIR" = 'n' ]; then
      echo [$SCRIPT]: - Removing Telstra Air
      SRV_hotspot=$(( $SRV_hotspot + 1 ))
      exec_uci delete dhcp.hotspot
      exec_uci delete dhcp.fonopen
      exec_uci commit dhcp
      SRV_dhcp=$(( $SRV_dhcp + 2 ))
      exec_uci delete network.fonopen
      exec_uci commit network
      SRV_network=$(( $SRV_network + 2 ))
      exec_uci delete web.fon
      exec_uci del_list web.ruleset_main.rules='fon'
      exec_uci commit web
      SRV_nginx=$(( $SRV_nginx + 2 ))
      for wl in $(uci -q show wireless | grep -E ssid=\'\(Fon\|Telstra\ Air\) | cut -d. -f2)
      do
        ap=$(uci -q show wireless | grep iface=\'$wl\' | cut -d. -f2)
        echo [$SCRIPT]: - Removing SSID $wl \(AP=$ap\)
        exec_uci delete wireless.$wl
        exec_uci delete wireless.$ap
        SRV_network=$(( $SRV_network + 2 ))
      done
      echo [$SCRIPT]: - Removing Telstra AIR Band Steering configuration
      exec_uci delete wireless.bs2
      exec_uci delete wireless.bs3
      SRV_network=$(( $SRV_network + 2 ))
      exec_uci commit wireless
      PACKAGES_TO_REMOVE="$PACKAGES_TO_REMOVE hotspotd webui-fon"
    else
      echo [$SCRIPT]: - OVERRIDE! Telstra AIR NOT Removed
    fi
  fi

  if [ "$__AIR" = 'n' ]; then
    if [ $(uci -q show firewall | grep 192.168.20.1 | wc -l) -eq 0 ]; then
      echo [$SCRIPT]: - Telstra AIR firewall entries already removed
    else
      echo [$SCRIPT]: - Deleting Telstra AIR firewall entries
      while [ $(uci -q show firewall | grep 192.168.20.1 | wc -l) -gt 0 ]
      do
        exec_uci delete $(uci -q show firewall | grep -m 1 192.168.20.1 | cut -d. -f1-2)
        SRV_fw=$(( $SRV_fw + 1 ))
      done
      exec_uci commit firewall
    fi
    if [ $(uci -q show qos | grep "classify.*target='FON'" | wc -l) -eq 0 -a $(uci -q show qos.FON | wc -l) -eq 0 ]; then
      echo [$SCRIPT]: - Telstra AIR QoS entries already removed
    else
      echo [$SCRIPT]: - Deleting Telstra AIR QoS entries
      exec_uci del_list qos.@reclassify[0].srcif='fonopen'
      exec_uci del_list qos.reclassify_1.srcif='fonopen'
      exec_uci delete $(uci -q show qos | grep "classify.*target='FON'" | cut -d. -f1-2)
      exec_uci delete qos.FON
      exec_uci commit qos
      SRV_qos=$(( $SRV_qos + 3 ))
    fi
  fi
fi

# Telstra NTP servers
if [ "$__NTP" = 'n' ]; then
  for s in $(uci -q get system.ntp.server | tr " " "$IFS")
  do
    if echo $s | grep -q -i telstra; then
      echo [$SCRIPT]: - Removing Telstra NTP server $s
      exec_uci del_list system.ntp.server="$s"
      SRV_ntp=$(( $SRV_ntp + 1 ))
    fi
  done
  if [ $SRV_ntp -eq 0 ]; then
    echo [$SCRIPT]: - Telstra NTP servers already removed
  else
    exec_uci commit system
  fi
else
  echo [$SCRIPT]: - OVERRIDE! Telstra NTP servers NOT Removed
fi

# USB noexec
if [ $(uci -q show mountd | grep -E 'mountd\.(ext[2-4]|fat|hfsplus(journal)*|ntfs)\.options=.*noexec.*' | wc -l) -gt 0 ]; then
  if [ "$__NOEXEC" = 'n' ]; then
    for fs in ext2 ext3 ext4 fat hfsplus hfsplusjournal ntfs
    do
      FS_OPT=$(uci -q get mountd.$fs.options)
      echo $FS_OPT | grep -q noexec
      if [ $? -eq 0 ]; then
        exec_uci set mountd.$fs.options="$(echo $FS_OPT | sed -e 's/noexec,//' -e 's/,noexec//')"
        SRV_mountd=$(( $SRV_mountd + 1 ))
        echo [$SCRIPT]: - noexec on $fs mounts Disabled
      fi
    done
    if [ $SRV_mountd -gt 0 ]; then
      exec_uci commit mountd
    fi
  else
    echo [$SCRIPT]: - OVERRIDE! noexec on ext2/3/4, fat, hfsplus, hfsplusjournal and ntfs mounts NOT Disabled
  fi
else
  echo [$SCRIPT]: - noexec on ext2/3/4, fat, hfsplus, hfsplusjournal and ntfs mounts already Disabled
fi

# Telstra APN check
if grep -q 'set_voip_iface(x, mobileiface4, mobileiface6)' /usr/lib/lua/wansensingfw/failoverhelper.lua; then
  if [ "$__LTE" == 'n' ]; then
    echo [$SCRIPT]: - Removing Telstra APN check
    sed -e 's/\(set_voip_iface(x, mobileiface4, mobileiface6\)\()\)/\1, true\2/' -i /usr/lib/lua/wansensingfw/failoverhelper.lua
    SRV_wansensing=$(( $SRV_wansensing + 1 ))
  else
    echo [$SCRIPT]: - OVERRIDE! Telstra APN check NOT removed
  fi
else
  echo [$SCRIPT]: - Telstra APN check already removed
fi

# Dropbear
if [ -f authorized_keys ]; then
  if [ "$__KEYS" = 'n' ]; then
    cmp -s authorized_keys /etc/dropbear/authorized_keys
    if [ $? -eq 1 ]; then
      echo [$SCRIPT]: - Found authorized_keys - replacing /etc/dropbear/authorized_keys
      cp authorized_keys /etc/dropbear/authorized_keys
      chmod 600 /etc/dropbear/authorized_keys
      chown root:root /etc/dropbear/authorized_keys
      SRV_dropbear=$(( $SRV_dropbear + 1 ))
    else
      echo [$SCRIPT]: - /etc/dropbear/authorized_keys already replaced
    fi
  else
    echo [$SCRIPT]: - OVERRIDE! Existing public keys in /etc/dropbear/authorized_keys NOT removed
    grep -q "$(head -n 1 authorized_keys)" /etc/dropbear/authorized_keys
    if [ $? -eq 1 ]; then
      echo [$SCRIPT]: - OVERRIDE! First key in authorized_keys not found in /etc/dropbear/authorized_keys - Appending entire file
      cat authorized_keys >> /etc/dropbear/authorized_keys
      chmod 600 /etc/dropbear/authorized_keys
      chown root:root /etc/dropbear/authorized_keys
      SRV_dropbear=$(( $SRV_dropbear + 1 ))
    else
      echo [$SCRIPT]: - OVERRIDE! First key in authorized_keys found in /etc/dropbear/authorized_keys - Assuming all keys already added
    fi
  fi
else
  if [ "$__KEYS" = 'n' ]; then
    if [ -z "$(cat /etc/dropbear/authorized_keys)" ]; then
      echo [$SCRIPT]: - All public keys already removed from /etc/dropbear/authorized_keys
    else
      echo [$SCRIPT]: - Removing all public keys from /etc/dropbear/authorized_keys
      echo > /etc/dropbear/authorized_keys
    fi
  else
    echo [$SCRIPT]: - OVERRIDE! Public keys not removed from /etc/dropbear/authorized_keys
  fi
fi
if [ "$(uci -q get dropbear.lan.enable)" = '1'  -a "$(uci -q get dropbear.lan.enable)" = '1' -a "$(uci -q get dropbear.lan.PasswordAuth)" = 'on' -a "$(uci -q get dropbear.lan.RootPasswordAuth)" = 'on' -a "$(uci -q get dropbear.lan.RootLogin)" = '1'  -a "$(uci -q get dropbear.wan.RootLogin)" = '1' ]; then
  echo [$SCRIPT]: SSH access already correctly configured
else
  # We need to enable dropbear LAN access properly as you can enable/disable via the GUI, and if
  # done without allowing password auth and root login, it can accidently prevent SSH access
  exec_uci set dropbear.lan.enable='1'
  exec_uci set dropbear.lan.PasswordAuth='on'
  exec_uci set dropbear.lan.RootPasswordAuth='on'
  exec_uci set dropbear.lan.RootLogin='1'
  # Not configurable via transformer/GUI, so need to set it on here
  exec_uci set dropbear.wan.RootLogin='1'
  exec_uci commit dropbear
  SRV_dropbear=$(( $SRV_dropbear + 4 ))
  echo [$SCRIPT]: SSH access correctly configured
fi
if [ "$(uci -q get dropbear.afg)" = "dropbear" ]; then
  echo "[$SCRIPT]: Removing SSH AFG/tch-exploit configuration (not needed - SSH LAN correctly configured)"
  exec_uci delete dropbear.afg
  exec_uci commit dropbear
  SRV_dropbear=$(( $SRV_dropbear + 1 ))
fi

# RTFD protection
if [ ! -e /rom/etc/rtfd_persistent_filelist.conf -a ! -e /etc/rtfd_persistent_filelist.conf ]; then
  ROOT_PROTECT_NOW="0"
elif [ ! -e /rom/etc/rtfd_persistent_filelist.conf -a -e /etc/rtfd_persistent_filelist.conf ]; then
  ROOT_PROTECT_NOW="1"
else
  cmp -s /rom/etc/rtfd_persistent_filelist.conf /etc/rtfd_persistent_filelist.conf
  ROOT_PROTECT_NOW="$?"
fi
if [ "$__ROOT_PROTECT" = "u" -o "$ROOT_PROTECT_NOW" = "$__ROOT_PROTECT" ]; then
  echo [$SCRIPT]: Reset to Factory Defaults root protection unchanged \[$(status2text $ROOT_PROTECT_NOW)\]
else
  [ ! -e /etc/rtfd_persistent_filelist.conf ] && touch /etc/rtfd_persistent_filelist.conf
  for f in /etc/passwd /etc/shadow /etc/config/dropbear /etc/dropbear/* /etc/rc.d/*dropbear; do
    if [ "$__ROOT_PROTECT" = "1" ]; then
      if grep -q -E "^$f$" /etc/rtfd_persistent_filelist.conf; then
        echo "$f">>/etc/rtfd_persistent_filelist.conf
      fi
    else
      sed -e "/^$(echo $f | sed -e 's|/|\\/|g')\$/d" -i /etc/rtfd_persistent_filelist.conf
    fi
  done
  echo [$SCRIPT]: Reset to Factory Defaults root protection $(status2text $__ROOT_PROTECT)
fi
if [ "$__ROOT_PROTECT" = "0" ]; then
  echo -e "[$SCRIPT]:${GREEN} NOTE: Installation of tch-gui-unhide will ALWAYS enable RTFD protection!${NC}"
fi

# End of hardening

# Telstra QoS VoWiFi reclassify rules
[ $SRV_qos_tch -ge 0 ] && qos_cfg="qos_tch" || qos_cfg="qos"
VoWiFi="$(uci -q show $qos_cfg | grep -E "$(uci -q show $qos_cfg | grep =reclassify | cut -d= -f1 | xargs | tr " " "|")" | grep VoWiFi | cut -d. -f1-2)"
if [ -z "$VoWiFi" ]; then
  echo [$SCRIPT]: All Telstra QoS VoWiFi reclassify rules already removed
else
  if [ "$__QoS" = "n" ]; then
    echo [$SCRIPT]: Removing all Telstra QoS VoWiFi reclassify rules
    for r in $VoWiFi; do
      exec_uci delete $r
    done
    exec_uci commit qos
    SRV_qos=$(( $SRV_qos + 3 ))
  else
    echo [$SCRIPT]: OVERRIDE! Telstra QoS VoWiFi reclassify rules not removed
  fi
fi

# Host Name
CURRENT_HOSTNAME="$(uci -q get system.@system[0].hostname)"
if [ "$__HOST" = "u" ]; then
  echo [$SCRIPT]: Host name unchanged \[$CURRENT_HOSTNAME\]
else
  case $__HOST in
  d) HOSTNAME=$VARIANT;;
  s) HOSTNAME=$VARIANT-$MAC_HEX;;
  *) HOSTNAME=$__HOST;;
  esac
  uci -q get dhcp.main.hostname | grep -q "$HOSTNAME"
  if [ $? -eq 0 -a "$(uci -q get system.@system[0].hostname)" = "$HOSTNAME" ]; then
    echo [$SCRIPT]: Host name is already $HOSTNAME
  else
    echo [$SCRIPT]: Setting the host name to $HOSTNAME
    uci -q get dhcp.main.hostname | grep -q telstra.wifi
    if [ -e /etc/config/multiap -a $? -eq 0 ]; then
      easymesh=true
    else
      easymesh=false
    fi
    exec_uci delete dhcp.main.hostname
    exec_uci add_list dhcp.main.hostname="$HOSTNAME"
    SRV_dnsmasq=$(( $SRV_dnsmasq + 2 ))
    if [ $easymesh = true ]; then
      echo [$SCRIPT]: Re-adding telstra.wifi hostname for MultiAP
      exec_uci add_list dhcp.main.hostname='telstra.wifi'
      SRV_dnsmasq=$(( $SRV_dnsmasq + 1 ))
    fi
    exec_uci commit dhcp
    exec_uci set system.@system[0].hostname="$HOSTNAME"
    exec_uci commit system
    SRV_system=$(( $SRV_system + 1 ))
    export HOSTNAME=$HOSTNAME
  fi
fi
HOSTNAME="$(uci -q get system.@system[0].hostname)"
SERIAL="$(uci -q get env.var.serial)"
DLNA_NAME="$(uci -q get dlnad.config.friendly_name)"
SAMBA_NAME="$(uci -q get samba.samba.name)"
if [ "$HOSTNAME" = "mymodem" -o "$HOSTNAME" = "mygateway" ]; then
  if [ "$DLNA_NAME" = "$CURRENT_HOSTNAME" -a "$CURRENT_HOSTNAME" != "$HOSTNAME" ]; then
    echo [$SCRIPT]: Changing DLNAD friendly name from $DLNA_NAME to Telstra Gateway
    exec_uci set dlnad.config.friendly_name="Telstra Gateway"
    exec_uci commit dlnad
    SRV_dlna=$(( $SRV_dlna + 1 ))
  fi
  if [ "$SAMBA_NAME" = "$CURRENT_HOSTNAME" -a "$CURRENT_HOSTNAME" != "$HOSTNAME" ]; then
    echo [$SCRIPT]: Changing SAMBA host name from $SAMBA_NAME to Telstra-Gateway
    exec_uci set samba.samba.name="Telstra-Gateway"
    exec_uci set samba.samba.description="Technicolor $VARIANT - $SERIAL"
    exec_uci commit samba
    SRV_samba=$(( $SRV_samba + 1 ))
  fi
else
  if [ "$DLNA_NAME" = 'Telstra Modem' -o "$DLNA_NAME" = 'Telstra Gateway' -o \( "$DLNA_NAME" = "$CURRENT_HOSTNAME" -a "$CURRENT_HOSTNAME" != "$HOSTNAME" \) ]; then
    echo [$SCRIPT]: Changing DLNAD friendly name from $DLNA_NAME to $HOSTNAME
    exec_uci set dlnad.config.friendly_name="$HOSTNAME"
    exec_uci commit dlnad
    SRV_dlna=$(( $SRV_dlna + 1 ))
  fi
  if [ "$SAMBA_NAME" = 'Telstra-Modem' -o "$SAMBA_NAME" = 'Telstra-Gateway' -o \( "$SAMBA_NAME" = "$CURRENT_HOSTNAME" -a "$CURRENT_HOSTNAME" != "$HOSTNAME" \) ]; then
    echo [$SCRIPT]: Changing SAMBA host name from $SAMBA_NAME to $HOSTNAME
    exec_uci set samba.samba.name="$HOSTNAME"
    exec_uci set samba.samba.description="Technicolor $VARIANT - $SERIAL"
    exec_uci commit samba
    SRV_samba=$(( $SRV_samba + 1 ))
  fi
fi

# Domain Name
DOMAIN_NOW="$(uci -q get dhcp.main.domain)"
if [ "$__DOMAIN" = "u" -o "$DOMAIN_NOW" = "$__DOMAIN" ]; then
  echo [$SCRIPT]: Domain name unchanged \[$DOMAIN_NOW\]
else
  echo [$SCRIPT]: Setting the domain to $__DOMAIN
  exec_uci set dhcp.main.domain="$__DOMAIN"
  exec_uci commit dhcp
  SRV_dnsmasq=$(( $SRV_dnsmasq + 1 ))
fi
LOCAL_NOW="$(uci -q get dhcp.main.local)"
if [ -n "$LOCAL_NOW" -a $(grep -E "$(echo $LOCAL_NOW | sed -e 's|/\([^/]*\)/|\\.\1\\b|')" /etc/hosts | wc -l) -eq 0 ]; then
  echo [$SCRIPT]: Removing incorrect dhcp.main.local configuration
  exec_uci delete dhcp.main.local
  uci commit dhcp
  SRV_dnsmasq=$(( $SRV_dnsmasq + 1 ))
fi

# DNS Servers
uci -q get network.wan > /dev/null
if [ $? -eq 0 ]; then
  WANDNS_NOW="$(uci -q get dhcp.main.server)"
  if [ "$__NS" = "u" ]; then
    if [ -z "$WANDNS_NOW" ]; then
      echo [$SCRIPT]: DNS Servers unchanged \[ No Custom DNS servers defined \]
    else
      echo [$SCRIPT]: DNS Servers unchanged \[ $WANDNS_NOW \]
    fi
  else
    case $__NS in
    a) echo [$SCRIPT]: Automatically use the DNS servers from the ISP
       exec_uci set network.wan.peerdns='1'
       exec_uci set network.wan6.peerdns='1'
       exec_uci delete network.wan.dns
       exec_uci delete network.wan6.dns
       exec_uci commit network
       SRV_network=$(( $SRV_network + 4 ))
       WANDNS1=""; WANDNS2="";;
    c) WANDNS1="1.1.1.1"; WANDNS2="1.0.0.1";;
    g) WANDNS1="8.8.8.8"; WANDNS2="8.8.4.4";;
    f) WANDNS1="208.67.222.123"; WANDNS2="208.67.220.123";;
    o) WANDNS1="208.67.222.222"; WANDNS2="208.67.220.220";;
    *) WANDNS1="$(echo $__NS | cut -d, -f1)"; WANDNS2="$(echo $__NS | cut -d, -f2)";;
    esac
    if [ -z "$WANDNS1" -a -z "$WANDNS2" ]; then
      exec_uci delete dhcp.main.server
      SRV_dhcp=$(( $SRV_dhcp + 1 ))
      echo [$SCRIPT]: Custom DNS Servers removed
    else
      IPv4PATTERN="([^.]|^)([0-9]{1,2}|1[0-9]{2}|2[0-4][0-9]|25[0-5]).([0-9]{1,2}|1[0-9]{2}|2[0-4][0-9]|25[0-5]).([0-9]{1,2}|1[0-9]{2}|2[0-4][0-9]|25[0-5]).([0-9]{1,2}|1[0-9]{2}|2[0-4][0-9]|25[0-5])([^.]|$)"
      echo "$WANDNS1" | grep -q -E $IPv4PATTERN
      if [ $? -eq 1 ]; then
        echo -e "[$SCRIPT]: ${ORANGE}WARNING! Invalid IP address $WANDNS1 IGNORED${NC}"
        WANDNS1=""
      fi
      if [ -n "$WANDNS2" ]; then
        echo "$WANDNS2" | grep -q -E $IPv4PATTERN
        if [ $? -eq 1 ]; then
          echo -e "[$SCRIPT]: ${ORANGE}WARNING! Invalid IP address $WANDNS2 IGNORED${NC}"
          WANDNS2=""
        fi
      fi
      if [ -z "$WANDNS1" -a -z "$WANDNS2" ]; then
        echo -e "[$SCRIPT]: ${ORANGE}WARNING! No valid IP addresses specified - No DNS Server changes applied${NC}"
      else
        if [ "$WANDNS_NOW" = "$WANDNS1 $WANDNS2" ]; then
          echo [$SCRIPT]: DNS Servers unchanged \[ $WANDNS_NOW \]
        else
          exec_uci delete dhcp.main.server
          SRV_dhcp=$(( $SRV_dhcp + 1 ))
          if [ -n "$WANDNS1" ]; then
            exec_uci add_list dhcp.main.server="$WANDNS1"
            SRV_dhcp=$(( $SRV_dhcp + 1 ))
          fi
          if [ -n "$WANDNS2" ]; then
            exec_uci add_list dhcp.main.server="$WANDNS2"
            SRV_dhcp=$(( $SRV_dhcp + 1 ))
          fi
          echo [$SCRIPT]: DNS Servers changed \[ $WANDNS1 $WANDNS2 \]
        fi
      fi
      exec_uci commit dhcp
    fi
  fi
else
  echo [$SCRIPT]: DNS unchanged - no WAN configuration??? Maybe in bridged mode...
fi

# DLNA
DLNA_NOW="$(uci -q get dlnad.config.enabled)"
if [ "$__DLNAD" = "u" -o "$DLNA_NOW" = "$__DLNAD" ]; then
  echo [$SCRIPT]: Content sharing unchanged \[$(status2text $DLNA_NOW)\]
else
  exec_uci set dlnad.config.enabled="$__DLNAD"
  exec_uci commit dlnad
  SRV_dlna=$(( $SRV_dlna + 1 ))
  echo [$SCRIPT]: Content sharing $(status2text $__DLNAD)
fi

# Printer Sharing
PS_NOW="$(uci -q get printersharing.config.enabled)"
if [ \( "$__PRNTR" = "u" -o "$PS_NOW" = "$__PRNTR" \) -a "$(iptables -S | grep -c 'lan.*--dport 631 .*DROP')" != "$__PRNTR" ]; then
  echo [$SCRIPT]: Printer sharing unchanged \[$(status2text $PS_NOW)\]
  SAMBA_PS="$PS_NOW"
else
  [ "$__PRNTR" = "1" ] && { CUPS_FW="0"; CUPS_WI="yes"; } || { CUPS_FW="1"; CUPS_WI="no"; }
  exec_uci set printersharing.config.enabled="$__PRNTR"
  exec_uci commit printersharing
  for rule in $(uci -q show firewall | grep -i Deny-CUPS-lan | cut -d. -f1-2); do
    if [ "$(uci -q get ${rule}.src)" = "lan" -a "$(uci -q get ${rule}.enabled)" != "$CUPS_FW" ]; then
      exec_uci set ${rule}.enabled="$CUPS_FW"
      SRV_fw=$(( $SRV_fw + 1 ))
      echo [$SCRIPT]: Printer sharing firewall rule $(uci -q get ${rule}.name) $(status2text $CUPS_FW)
    fi
  done
  exec_uci commit firewall
  for f in $(grep -li WebInterface $(find /etc/ -type f -name '*cups*')); do
    sed -e "s/\(WebInterface[ =]*\)\(no\|yes\)/\1${CUPS_WI}/" -i "$f"
  done
  grep -q WebInterface /etc/cups/cupsd.conf || echo "WebInterface ${CUPS_WI}" >> /etc/cups/cupsd.conf
  echo [$SCRIPT]: CUPSD Web Interface $(status2text $CUPS_WI)
  SRV_cups=$(( $SRV_cups + 1 ))
  SAMBA_PS="$__PRNTR"
  echo [$SCRIPT]: Printer sharing $(status2text $__PRNTR)
fi

# File Sharing
FS_NOW="$(uci -q get samba.samba.filesharing)"
if [ "$__SAMBA" = "u" -o "$FS_NOW" = "$__SAMBA" ]; then
  echo [$SCRIPT]: File sharing unchanged \[$(status2text $FS_NOW)\]
  SAMBA_FS="$FS_NOW"
else
  exec_uci set samba.samba.filesharing="$__SAMBA"
  exec_uci commit samba
  SRV_samba=$(( $SRV_samba + 1 ))
  SAMBA_FS="$__SAMBA"
  echo [$SCRIPT]: File sharing $(status2text $__SAMBA)
fi

# SAMBA
SAMBA_NOW="$(uci -q get samba.samba.enabled)"
if [ "$SAMBA_NOW" = "1" -a "$SAMBA_PS" = "0" -a "$SAMBA_FS" = "0" ]; then
  exec_uci set samba.samba.enabled="0"
  exec_uci commit samba
  SRV_samba=$(( $SRV_samba + 1 ))
  echo [$SCRIPT]: SAMBA Disabled
elif [ "$SAMBA_NOW" = "0" -a \( "$SAMBA_PS" = "1" -o "$SAMBA_FS" = "1" \) ]; then
  exec_uci set samba.samba.enabled="1"
  exec_uci commit samba
  SRV_samba=$(( $SRV_samba + 1 ))
  echo [$SCRIPT]: SAMBA Enabled
fi

# Telephony
MMPBX_NOW="$(uci -q get mmpbx.global.enabled)"
if [ "$__MMPBX" = "u" -o "$MMPBX_NOW" = "$__MMPBX" ]; then
  echo [$SCRIPT]: Telephony unchanged \[$(status2text $MMPBX_NOW)\]
else
  exec_uci set mmpbx.global.enabled="$__MMPBX"
  exec_uci commit mmpbx
  SRV_mmpbxd=$(( $SRV_mmpbxd + 1 ))
  MMPBX_NOW="$__MMPBX"
  if [ "$__MMPBX" = "1" ]; then
    echo [$SCRIPT]: Telephony Enabled
  else
    echo [$SCRIPT]: Telephony Disabled
  fi
fi
if [ "$(uci -q get mmpbxmobilenet.VoLTE)" = "profile" ]; then
  if [ "$(uci -q get mmpbxmobilenet.VoLTE.enabled)" = "1" ]; then
    echo [$SCRIPT]: VoLTE already Enabled
  else
    echo [$SCRIPT]: Enabling VoLTE backup voice service and SMS reception
    exec_uci set mmpbxmobilenet.VoLTE.enabled='1'
    exec_uci commit mmpbxmobilenet
    SRV_mmpbxd=$(( $SRV_mmpbxd + 1 ))
    exec_uci set mobiled_device_specific.@device[0].ims_pdn_autobringup='1'
    exec_uci set mobiled_sessions.@session[0].activated='1'
    exec_uci set mobiled_sessions.@session[0].autoconnect='1'
    exec_uci set mobiled_sessions.@session[0].optional='1'
    exec_uci commit mobiled_device_specific
    exec_uci commit mobiled_sessions
    SRV_mobiled=$(( $SRV_mobiled + 1 ))
  fi
fi

# DECT
DECT_NOW="$(uci -q get mmpbx.dectemission.state)"
if [ -n "$DECT_NOW" ]; then
  if [ "$__DECT" = "u" -o "$DECT_NOW" = "$__DECT" ]; then
    echo [$SCRIPT]: DECT Emission Mode unchanged \[$(status2text $DECT_NOW)\]
  else
    exec_uci set mmpbx.dectemission.state="$__DECT"
    exec_uci commit mmpbx
    SRV_mmpbxd=$(( $SRV_mmpbxd + 1 ))
    echo [$SCRIPT]: DECT Emission Mode $(status2text $__DECT)
  fi
  if [ "$DECT_NOW" = "1" -a -n "$(uci -q get mmpbxbrcmdectdev.dect_base.supported_manufacturer_codes)" ]; then
    exec_uci delete mmpbxbrcmdectdev.dect_base.supported_manufacturer_codes
    exec_uci commit mmpbxbrcmdectdev
    SRV_mmpbxd=$(( $SRV_mmpbxd + 1 ))
    echo [$SCRIPT]: DECT Supported Manufacturer Codes removed to fix issues registering Gigaset handsets
  fi
fi

# WAN Supervision
if [ $SRV_supervision -ge 0 ]; then
  SUPERVISION_NOW="$(uci -q get supervision.global.mode)"
  if [ "$__SUPERVISION" = "u" -o "$SUPERVISION_NOW" = "$__SUPERVISION" ]; then
    echo [$SCRIPT]: WAN Supervision unchanged \[$SUPERVISION_NOW\]
  else
    exec_uci set supervision.global.mode="$__SUPERVISION"
    if [ $__SUPERVISION = "Disabled" ]
      then exec_uci set supervision.global.enabled="0"
      else exec_uci set supervision.global.enabled="1"
    fi
    exec_uci commit supervision
    SRV_supervision=$(( $SRV_supervision + 1 ))
    echo [$SCRIPT]: WAN Supervision Mode = $__SUPERVISION
  fi
fi

# Intercept Daemon
INTERCEPT_NOW="$(uci -q get intercept.config.enabled)"
if [ "$__INTERCEPT" = "u" -o "$INTERCEPT_NOW" = "$__INTERCEPT" ]; then
  echo [$SCRIPT]: Intercept Daemon unchanged \[$(status2text $INTERCEPT_NOW)\]
else
  exec_uci set intercept.config.enabled="$__INTERCEPT"
  exec_uci commit intercept
  SRV_intercept=$(( $SRV_intercept + 1 ))
  echo [$SCRIPT]: Intercept Daemon $(status2text $__INTERCEPT)
fi

# LED Logging
LED_LOG_NOW=$(uci -q get ledfw.syslog.trace)
if [ -n "$LED_LOG_NOW" ]; then
  if [ "$__LED_LOG" = "u" -o "$LED_LOG_NOW" = "$__LED_LOG" ]; then
    echo [$SCRIPT]: LED Logging unchanged \[$(status2text $LED_LOG_NOW)\]
  else
    exec_uci set ledfw.syslog.trace="$__LED_LOG"
    exec_uci commit ledfw
    SRV_ledfw=$(( $SRV_ledfw + 1 ))
    echo [$SCRIPT]: LED Logging $(status2text $__LED_LOG)
  fi
fi

# Wi-Fi WPS
if [ "$__WPS" = "u" ]; then
  WPS_NOW="$(uci -q show wireless | grep wps_state=\'1\' | wc -l)"
  if [ "$WPS_NOW" -eq 1 ]; then
    echo [$SCRIPT]: WPS unchanged \[Enabled on 1 Access Point\]
  else
    echo [$SCRIPT]: WPS unchanged \[Enabled on $WPS_NOW Access Points\]
  fi
else
  if [ $(uci -q show wireless | grep '=wifi-ap' | wc -l) -eq 0 ]; then
    for path in $(transformer-cli get rpc.X_AIRTIES_Obj.MultiAPController.SSIDProfile.| grep 'SSID \[string\] = ' | grep -vE '= ($|Guest|BH-)' | cut -d. -f1-5); do
      ssid="$(transformer-cli get ${path}.SSID | cut -d= -f2 | xargs)"
      [ "$(transformer-cli get ${path}.WPS | cut -d= -f2 | xargs)" = true ] && wps_state=1 || wps_state=0
      if [ "$wps_state" = "$__WPS" ]; then
        echo [$SCRIPT]: WPS State unchanged on SSID $ssid \[$(status2text $__WPS)\]
      else
        [ "$__WPS" = 1 ] && transformer-cli set ${path}.WPS true || transformer-cli set ${path}.WPS false
        SRV_wifi=$(( $SRV_wifi + 1 ))
        echo [$SCRIPT]: WPS State on SSID $ssid $(status2text $__WPS)
      fi
    done
  else
    for ap in $(uci -q show wireless | grep -E "='($(uci -q show wireless | grep ssid= | grep -v -E '(Guest|BH-)' | cut -d. -f2 | xargs | tr ' ' '|'))'$" | cut -d. -f2); do
      ssid="$(uci -q get wireless.$ap.ssid)"
      [ -z "$ssid" ] && ssid=$(uci -q get wireless.$(uci -q get wireless.$ap.iface).ssid)
      wps_state="$(uci -q get wireless.$ap.wps_state)"
      if [ "$wps_state" = "$__WPS" ]; then
        echo [$SCRIPT]: WPS State unchanged on SSID $ssid \[$(status2text $__WPS)\]
      else
        exec_uci set wireless.$ap.wps_state="$__WPS"
        SRV_wifi=$(( $SRV_wifi + 1 ))
        echo [$SCRIPT]: WPS State on SSID $ssid $(status2text $__WPS)
      fi
    done
  fi
  if [ $SRV_wifi -gt 0 ]; then
    exec_uci commit wireless
  fi
fi

# NAT ALG Helpers
if [ "$VERSION" = "17.2" -o "$VERSION" = "18.1.c" ]; then
  if [ "$__ALG" = "u" ]; then
    ALG_ENABLED=0
    for g in $(uci -q show firewall | grep '\.helper' | cut -d\' -f2); do
      key=$(uci -q show firewall | grep '\.helper' | grep -i "\b$g" | sed 's/\(.*\)\.helper=.*/\1/')
      ALG_ENABLED=$(( $ALG_ENABLED + $(uci -q get $key.enable || echo 1) ))
    done
    echo [$SCRIPT]: ALGs unchanged \[$ALG_ENABLED Enabled\]
  else
    for g in $(uci -q show firewall | grep '\.helper' | cut -d\' -f2); do
      key=$(uci -q show firewall | grep '\.helper' | grep -i "\b$g" | sed 's/\(.*\)\.helper=.*/\1/')
      G=$(echo $g | tr "[a-z]" "[A-Z]")
      G_NOW="$(uci -q get $key.enable || echo 1)"
      if [ "$G_NOW" != "$__ALG" ]; then
        if [ "$__ALG" = "0" ]; then
          echo [$SCRIPT]: $G ALG Disabled
        else
          echo [$SCRIPT]: $G ALG Enabled
        fi
        exec_uci set $key.enable="$__ALG"
        exec_uci commit firewall
        SRV_fw=$(( $SRV_fw + 1 ))
      else
        echo [$SCRIPT]: $G ALG unchanged \[$(status2text $G_NOW)\]
      fi
    done
  fi
else # 20.3.c and later
  LAN_ZONE=$(uci -q show firewall | grep @zone | grep -m 1 "name='lan'" | cut -d. -f1-2)
  WAN_ZONE=$(uci -q show firewall | grep @zone | grep -m 1 "wan='1'" | cut -d. -f1-2)
  if [ "$__ALG" = "u" ]; then
    LAN_HELP=$(uci -qd"$IFS" get $LAN_ZONE.helper | sort | xargs)
    WAN_HELP=$(uci -qd"$IFS" get $WAN_ZONE.helper | sort | xargs)
    if [ "$LAN_HELP" = "$WAN_HELP" ]; then
      echo [$SCRIPT]: ALGs unchanged \[$(uci -q get $(uci -q show firewall | grep @zone | grep "wan='1'" | cut -d. -f1-2).helper | wc -w) Enabled\]
    else
      if [ -z "$WAN_HELP" ]; then
        if [ -n "$LAN_HELP" ]; then
          exec_uci delete $WAN_ZONE.helper
          exec_uci delete $LAN_ZONE.helper
        fi
      else
        exec_uci delete $LAN_ZONE.helper
        for h in $WAN_HELP
        do
          exec_uci add_list $LAN_ZONE.helper="$h"
        done
      fi
      exec_uci commit firewall
      SRV_fw=$(( $SRV_fw + 1 ))
      echo [$SCRIPT]: ALGs fixed \[$(echo $WAN_HELP | wc -w) Enabled\]
    fi
  else
    [ -n "$(uci -q get $LAN_ZONE.helper)" ] && exec_uci delete $LAN_ZONE.helper
    [ -n "$(uci -q get $WAN_ZONE.helper)" ] && exec_uci delete $WAN_ZONE.helper
    if [ "$__ALG" = "0" ]; then
      echo [$SCRIPT]: All ALGs Disabled
    else
      for g in ftp tftp snmp pptp sip irc amanda rtsp
      do
        G=$(echo $g | tr "[a-z]" "[A-Z]")
        exec_uci add_list $LAN_ZONE.helper="$g"
        exec_uci add_list $WAN_ZONE.helper="$g"
        echo [$SCRIPT]: $G ALG Enabled
      done
    fi
    exec_uci commit firewall
    SRV_fw=$(( $SRV_fw + 1 ))
  fi
fi

# UPnP
UPNP_NOW="$(uci -q get upnpd.config.enable_upnp)"
NATPMP_NOW="$(uci -q get upnpd.config.enable_natpmp)"
if [ "$__UPNP" = "u" -o \( "$NATPMP_NOW" = "$__UPNP" -a "$UPNP_NOW" = "$__UPNP" \) ]; then
  echo [$SCRIPT]: UPnP unchanged \[UPnP: $(status2text $UPNP_NOW) NAT-PMP: $(status2text $NATPMP_NOW)\]
else
  exec_uci set upnpd.config.enable_natpmp="$__UPNP"
  exec_uci set upnpd.config.enable_upnp="$__UPNP"
  exec_uci commit upnpd
  SRV_upnp=$(( $SRV_upnp + 2 ))
  echo [$SCRIPT]: UPnP $(status2text $__UPNP)
fi

# DumaOS
if [ $SRV_dumaos -ge 0 ]; then
  DUMAOS_NOW="$(uci -q get dumaos.tr69.dumaos_enabled)"
  if [ "$__DUMAOS" = "u" -o "$DUMAOS_NOW" = "$__DUMAOS" ]; then
    echo [$SCRIPT]: DumaOS unchanged \[$(status2text $DUMAOS_NOW)\]
  else
    exec_uci set dumaos.tr69.dumaos_enabled="$__DUMAOS"
    exec_uci commit dumaos
    SRV_dumaos=$(( $SRV_dumaos + 1 ))
    echo [$SCRIPT]: DumaOS $(status2text $__DUMAOS)
  fi
fi

# EasyMesh
if [ $SRV_multiap -ge 0 ]; then
  BHAUL_IF="$(uci -q show wireless | grep "backhaul='1'" | cut -d. -f2)"
  BHAUL_AP="$(uci -q show wireless | grep -E "wireless\.ap.*\.iface='$BHAUL_IF'" | cut -d. -f2)"
  AGENT_NOW="$(uci -q get multiap.agent.enabled)"
  CTRLR_NOW="$(uci -q get multiap.controller.enabled)"
  VNDRX_NOW="$(uci -q get vendorextensions.multiap_vendorextensions.enable)"
  BHAUL_AP_NOW="$(uci -q get wireless.$BHAUL_AP.state)"
  BHAUL_IF_NOW="$(uci -q get wireless.$BHAUL_IF.state)"
  if [ \( "$__MULTIAP_AGT" = "u" -a "$__MULTIAP_BKH" = "u" -a "$__MULTIAP_CTL" = "u" -a "$__MULTIAP_VND" = "u" \) -o \( "$AGENT_NOW" = "$__MULTIAP_AGT" -a "$CTRLR_NOW" = "$__MULTIAP_CTL" -a "$VNDRX_NOW" = "$__MULTIAP_VND" -a "$BHAUL_AP_NOW" = "$__MULTIAP_BKH" -a "$BHAUL_IF_NOW" = "$__MULTIAP_BKH" \) ]; then
    echo [$SCRIPT]: MultiAP unchanged \[Controller: $(status2text $CTRLR_NOW) Agent: $(status2text $AGENT_NOW) Vendor Extensions: $(status2text $VNDRX_NOW) BackHaul SSID: $(status2text $BHAUL_IF_NOW)\]
  else
    [ "$__MULTIAP_AGT" != "u" ] && { exec_uci set multiap.agent.enabled="$__MULTIAP_AGT"; SRV_multiap=$(( $SRV_multiap + 1 )); }
    [ "$__MULTIAP_CTL" != "u" ] && { exec_uci set multiap.controller.enabled="$__MULTIAP_CTL"; SRV_multiap=$(( $SRV_multiap + 1 )); }
    [ $SRV_multiap -gt 0 ] && exec_uci commit multiap
    [ "$__MULTIAP_VND" != "u" ] && { exec_uci set vendorextensions.multiap_vendorextensions.enable="$__MULTIAP_VND"; SRV_multiap=$(( $SRV_multiap + 1 )); }
    if [ "$__MULTIAP_BKH" != "u" ]; then
      exec_uci set wireless.$BHAUL_AP.state="$__MULTIAP_BKH"
      exec_uci set wireless.$BHAUL_IF.state="$__MULTIAP_BKH"
      SRV_wifi=$(( $SRV_wifi + 2 ))
      SRV_network=$(( $SRV_network + 1 ))
      exec_uci commit wireless
    fi
    echo [$SCRIPT]: MultiAP Agent $(status2text $__MULTIAP_AGT)
    echo [$SCRIPT]: MultiAP Controller $(status2text $__MULTIAP_CTL)
    echo [$SCRIPT]: MultiAP BackHaul SSID $(status2text $__MULTIAP_BKH)
    echo [$SCRIPT]: MultiAP Vendor Extensions $(status2text $__MULTIAP_VND)
  fi
fi
if [ $SRV_mesh_broker -ge 0 ]; then
  AGENT_NOW="$(uci -q get wireless.agent.state)"
  CTRLR_NOW="$(uci -q get mesh_broker.mesh_common.controller_enabled)"
  BHAUL_CRED=$(uci -q show mesh_broker | grep "backhaul='1'" | cut -d. -f2)
  BHAUL_NOW=$(uci -q get mesh_broker.$BHAUL_CRED.state)
  if [ \( "$__MULTIAP_AGT" = "u" -a "$__MULTIAP_BKH" = "u" -a "$__MULTIAP_CTL" = "u" \) -o \( "$AGENT_NOW" = "$__MULTIAP_AGT" -a "$CTRLR_NOW" = "$__MULTIAP_CTL" -a "$BHAUL_AP_NOW" = "$__MULTIAP_BKH" -a "$BHAUL_IF_NOW" = "$__MULTIAP_BKH" \) ]; then
    echo [$SCRIPT]: EasyMesh unchanged \[Controller: $(status2text $CTRLR_NOW) Agent: $(status2text $AGENT_NOW) BackHaul SSID: $(status2text $BHAUL_IF_NOW)\]
  else
    [ "$__MULTIAP_AGT" != "u" ] && { exec_uci set wireless.agent.state="$__MULTIAP_AGT"; SRV_mesh_broker=$(( $SRV_mesh_broker + 1 )); }
    [ "$__MULTIAP_CTL" != "u" ] && { exec_uci set mesh_broker.mesh_common.controller_enabled="$__MULTIAP_CTL"; SRV_mesh_broker=$(( $SRV_mesh_broker + 1 )); }
    [ "$__MULTIAP_BKH" != "u" ] && { exec_uci set mesh_broker.$BHAUL_CRED.state="$__MULTIAP_BKH"; SRV_mesh_broker=$(( $SRV_mesh_broker + 1 )); }
    [ "$__MULTIAP_AGT" = "0" -a "$__MULTIAP_CTL" = "0" ] && MESH_BROKER="0" || MESH_BROKER="1"
    [ "$(uci -q get mesh_broker.mesh_broker.enable)" != $MESH_BROKER ] && { exec_uci set mesh_broker.mesh_broker.enable="$MESH_BROKER"; SRV_mesh_broker=$(( $SRV_mesh_broker + 1 )); }
    [ $SRV_mesh_broker -gt 0 ] && exec_uci commit mesh_broker
    echo [$SCRIPT]: EasyMesh Agent $(status2text $__MULTIAP_AGT)
    echo [$SCRIPT]: EasyMesh Controller $(status2text $__MULTIAP_CTL)
    echo [$SCRIPT]: EasyMesh BackHaul SSID $(status2text $__MULTIAP_BKH)
  fi
fi

# NFC
if [ $SRV_nfc -ge 0 ]; then
  NFC_NOW="$(uci -q get nfc.@nfc[0].enabled)"
  if [ "$__NFC" = "u" -o "$NFC_NOW" = "$__NFC" ]; then
    echo [$SCRIPT]: NFC unchanged \[$(status2text $NFC_NOW)\]
  else
    exec_uci set nfc.@nfc[0].enabled="$__NFC"
    exec_uci commit nfc
    SRV_nfc=$(( $SRV_nfc + 1 ))
    echo [$SCRIPT]: NFC $(status2text $__NFC)
  fi
fi

# Power Saving
PWR_OPTIONS="$(pwrctl 2>&1 | grep -oe '--[^[:blank:]]*' | sort -u)"
PWR_CFG_SET() { echo $PWR_OPTIONS | grep -qe "--$1\b" && pwrctl config --$1 $2; }
PWR_STATUS=$(pwrctl show | grep -i ENABLED | wc -l)
if [ \( $PWR_STATUS -eq 0 -a "$__POWER" = "n" \) -o \( $PWR_STATUS -gt 0 -a "$__POWER" = "y" \) ]; then
  __POWER='u'
fi
case "$__POWER" in
  u)  echo [$SCRIPT]: Power saving settings unchanged \[$(status2text $PWR_STATUS)\];;
  n)  echo [$SCRIPT]: Disabling power saving...
      if [ "$VERSION" = "17.2" ]; then
        PWR_CFG_SET cpuspeed   0   # CPU Speed
        PWR_CFG_SET wait       off # CPU Wait
        PWR_CFG_SET ethapd     off # PHY APD: Auto Power Down
        PWR_CFG_SET eee        off # PHY EEE: Energy Efficient Ethernet
        PWR_CFG_SET autogreeen off # Ethernet AutoGrEEEn
        PWR_CFG_SET dgm        off # SF2 DGM: Deep Green Mode
        exec_uci set power.ethernet.autogreeen='0'
        exec_uci set power.ethernet.eee='0'
      elif [ "$VERSION" = "18.1.c" ]; then
        PWR_CFG_SET cpuspeed   0   # CPU Speed
        PWR_CFG_SET wait       off # CPU Wait
        PWR_CFG_SET ethapd     off # PHY APD: Auto Power Down
        PWR_CFG_SET eee        off # PHY EEE: Energy Efficient Ethernet
        PWR_CFG_SET autogreeen off # Ethernet AutoGrEEEn
        PWR_CFG_SET dgm        off # SF2 DGM: Deep Green Mode
        exec_uci set power.ethernet.autogreeen='0'
        exec_uci set power.ethernet.eee='0'
      elif [ "$VERSION" = "20.3.c" ]; then
        PWR_CFG_SET net        off # Network device down
        PWR_CFG_SET phy        off # PHY Power Down
        PWR_CFG_SET eee        off # PHY EEE: Energy Efficient Ethernet
        PWR_CFG_SET apd        off # PHY APD: Auto Power Down
        PWR_CFG_SET dgm        off # SF2 DGM: Deep Green Mode
        exec_uci set power.ethernet.net='0'
        exec_uci set power.ethernet.phy='0'
        exec_uci set power.ethernet.eee='0'
        exec_uci set power.ethernet.apd='0'
        exec_uci set power.ethernet.dgm='0'
      elif [ "$VERSION" = "20.4" ]; then
        PWR_CFG_SET disk       off # Disk Suspend: USB, SATA etc.
        PWR_CFG_SET wifi       off # WIFI suspend
        PWR_CFG_SET ubus       off # UBUS DCM
        PWR_CFG_SET cpuwait    off # CPU Wait
        PWR_CFG_SET xrdp       off # XRDP Clock Gating
        PWR_CFG_SET net        off # Network device down
        PWR_CFG_SET phy        off # PHY Power Down
        PWR_CFG_SET eee        off # PHY EEE: Energy Efficient Ethernet
        PWR_CFG_SET apd        off # PHY APD: Auto Power Down
        PWR_CFG_SET sr         off # DRAM SR: Self Refresh
        PWR_CFG_SET avs        off # AVS: Adaptive Voltage Scaling
        exec_uci set power.eee.enabled='1'
      fi
      exec_uci commit power;;
  y)  echo [$SCRIPT]: Enabling power saving...
      if [ "$VERSION" = "17.2" ]; then
        PWR_CFG_SET cpuspeed   1   # CPU Speed
        PWR_CFG_SET wait       on  # CPU Wait
        PWR_CFG_SET ethapd     on  # PHY APD: Auto Power Down
        PWR_CFG_SET eee        on  # PHY EEE: Energy Efficient Ethernet
        PWR_CFG_SET autogreeen on  # Ethernet AutoGrEEEn
        PWR_CFG_SET dgm        on  # SF2 DGM: Deep Green Mode
        exec_uci set power.ethernet.autogreeen='1'
        exec_uci set power.ethernet.eee='1'
      elif [ "$VERSION" = "18.1.c" ]; then
        PWR_CFG_SET cpuspeed   1   # CPU Speed
        PWR_CFG_SET wait       on  # CPU Wait
        PWR_CFG_SET ethapd     on  # PHY APD: Auto Power Down
        PWR_CFG_SET eee        on  # PHY EEE: Energy Efficient Ethernet
        PWR_CFG_SET autogreeen on  # Ethernet AutoGrEEEn
        PWR_CFG_SET dgm        on  # SF2 DGM: Deep Green Mode
        exec_uci set power.ethernet.autogreeen='1'
        exec_uci set power.ethernet.eee='1'
      elif [ "$VERSION" = "20.3.c" ]; then
        #PWR_CFG_SET net       on  # Network device down
        #PWR_CFG_SET phy       on  # PHY Power Down
        PWR_CFG_SET eee        on  # PHY EEE: Energy Efficient Ethernet
        PWR_CFG_SET apd        on  # PHY APD: Auto Power Down
        PWR_CFG_SET dgm        on  # SF2 DGM: Deep Green Mode
        exec_uci set power.ethernet.net='1'
        exec_uci set power.ethernet.phy='1'
        exec_uci set power.ethernet.eee='1'
        exec_uci set power.ethernet.apd='1'
        exec_uci set power.ethernet.dgm='1'
      elif [ "$VERSION" = "20.4" ]; then
        PWR_CFG_SET disk       on  # Disk Suspend: USB, SATA etc.
        PWR_CFG_SET wifi       on  # WIFI suspend
        PWR_CFG_SET ubus       on  # UBUS DCM
        PWR_CFG_SET cpuwait    on  # CPU Wait
        PWR_CFG_SET xrdp       on  # XRDP Clock Gating
        #PWR_CFG_SET net       on  # Network device down
        #PWR_CFG_SET phy       on  # PHY Power Down
        PWR_CFG_SET eee        on  # PHY EEE: Energy Efficient Ethernet
        PWR_CFG_SET apd        on  # PHY APD: Auto Power Down
        PWR_CFG_SET sr         on  # DRAM SR: Self Refresh
        PWR_CFG_SET avs        on  # AVS: Adaptive Voltage Scaling
        exec_uci set power.eee.enabled='1'
      fi
      exec_uci commit power;;
  d)  echo [$SCRIPT]: Resetting power saving to defaults...
      if [ "$VERSION" = "17.2" ]; then
        PWR_CFG_SET cpuspeed   1   # CPU Speed
        PWR_CFG_SET wait       on  # CPU Wait
        PWR_CFG_SET ethapd     on  # PHY APD: Auto Power Down
        PWR_CFG_SET eee        on  # PHY EEE: Energy Efficient Ethernet
        PWR_CFG_SET autogreeen on  # Ethernet AutoGrEEEn
        PWR_CFG_SET dgm        on  # SF2 DGM: Deep Green Mode
        exec_uci set power.ethernet.autogreeen='1'
        exec_uci set power.ethernet.eee='1'
      elif [ "$VERSION" = "18.1.c" ]; then
        PWR_CFG_SET cpuspeed   1   # CPU Speed
        PWR_CFG_SET wait       on  # CPU Wait
        PWR_CFG_SET ethapd     on  # PHY APD: Auto Power Down
        PWR_CFG_SET eee        on  # PHY EEE: Energy Efficient Ethernet
        PWR_CFG_SET autogreeen on  # Ethernet AutoGrEEEn
        PWR_CFG_SET dgm        on  # SF2 DGM: Deep Green Mode
        exec_uci set power.ethernet.autogreeen='1'
        exec_uci set power.ethernet.eee='1'
      elif [ "$VERSION" = "20.3.c" ]; then
        PWR_CFG_SET net        off # Network device down
        PWR_CFG_SET phy        off # PHY Power Down
        PWR_CFG_SET eee        on  # PHY EEE: Energy Efficient Ethernet
        PWR_CFG_SET apd        on  # PHY APD: Auto Power Dow
        PWR_CFG_SET dgm        on  # SF2 DGM: Deep Green Mode
        exec_uci set power.ethernet.net='0'
        exec_uci set power.ethernet.phy='0'
        exec_uci set power.ethernet.eee='1'
        exec_uci set power.ethernet.apd='1'
        exec_uci set power.ethernet.dgm='1'
      elif [ "$VERSION" = "20.4" ]; then
        PWR_CFG_SET disk       off # Disk Suspend: USB, SATA etc.
        PWR_CFG_SET wifi       off # WIFI suspend
        PWR_CFG_SET ubus       on  # UBUS DCM
        PWR_CFG_SET cpuwait    on  # CPU Wait
        PWR_CFG_SET xrdp       on  # XRDP Clock Gating
        PWR_CFG_SET net        off # Network device down
        PWR_CFG_SET phy        off # PHY Power Down
        PWR_CFG_SET eee        on  # PHY EEE: Energy Efficient Ethernet
        PWR_CFG_SET apd        on  # PHY APD: Auto Power Down
        PWR_CFG_SET sr         off # DRAM SR: Self Refresh
        PWR_CFG_SET avs        on  # AVS: Adaptive Voltage Scaling
        exec_uci set power.eee.enabled='1'
      fi
      exec_uci commit power;;
esac

# Package Repository
[ -n "$__REPO" ] && HOMEWARE=$__REPO
# macoers repository URL changed, so need to update if it is the old one
OPKG_DEP=$(grep -c 'www.macoers.com/repository' /etc/opkg/customfeeds.conf)
if [ "$__OPKG" = "y" -o $OPKG_DEP -gt 0 ]; then
  if [ $ARMv7 -eq 1 ]; then
    if [ $OPKG_DEP -gt 0 -o $(find /var/opkg-lists/ -type f 2>/dev/null | wc -l) -eq 0 -o \( "$HOMEWARE" -eq 17 -a $(sed -e '/^#/d' /etc/opkg/customfeeds.conf | grep 'BoLaMN' | wc -l) -eq 0 \) -o \( "$HOMEWARE" -eq 18 -a $(sed -e '/^#/d' /etc/opkg/customfeeds.conf | grep 'homeware/18' | wc -l) -eq 0 \) -o \( \( "$HOMEWARE" -eq 19 -o "$HOMEWARE" -eq 20 \) -a $(sed -e '/^#/d' /etc/opkg/customfeeds.conf | grep 'homeware/19' | wc -l) -eq 0 \) ]; then
      if [ "$HOMEWARE" -ge 17 -a "$HOMEWARE" -le 20 ]; then
        ping -c 1 -W 2 -q 1.1.1.1 >/dev/null 2>&1
        if [ $? -eq 0 ]; then
          echo [$SCRIPT]: Configuring opkg architectures...
          rm /etc/opkg.conf
          echo 'dest root'>/etc/opkg.conf
          echo 'dest ram /tmp'>>/etc/opkg.conf
          echo 'lists_dir ext /var/opkg-lists'>>/etc/opkg.conf
          echo 'option overlay_root /overlay'>>/etc/opkg.conf
          echo 'arch all 1'>>/etc/opkg.conf
          echo 'arch noarch 1'>>/etc/opkg.conf
          echo 'arch arm_cortex-a9 10'>>/etc/opkg.conf
          echo 'arch arm_cortex-a9_neon 20'>>/etc/opkg.conf
          echo 'arch brcm63xx-tch 30'>>/etc/opkg.conf
          echo 'arch bcm53xx 40'>>/etc/opkg.conf
          if [ $OPKG_DEP -gt 0 ]; then
            sed -e '/macoers/d' -i /etc/opkg/customfeeds.conf
            echo [$SCRIPT]: Re-configuring opkg for Homeware $HOMEWARE \(repository moved\)...
          else
            echo [$SCRIPT]: Configuring opkg for Homeware $HOMEWARE...
          fi
          rm /etc/opkg/customfeeds.conf
          case "$HOMEWARE" in
            17)
              echo 'src/gz base https://raw.githubusercontent.com/BoLaMN/brcm63xx-tch/master/packages/base'>/etc/opkg/customfeeds.conf
              echo 'src/gz luci https://raw.githubusercontent.com/BoLaMN/brcm63xx-tch/master/packages/luci'>>/etc/opkg/customfeeds.conf
              echo 'src/gz management https://raw.githubusercontent.com/BoLaMN/brcm63xx-tch/master/packages/management'>>/etc/opkg/customfeeds.conf
              echo 'src/gz packages https://raw.githubusercontent.com/BoLaMN/brcm63xx-tch/master/packages/packages'>>/etc/opkg/customfeeds.conf
              echo 'src/gz routing https://raw.githubusercontent.com/BoLaMN/brcm63xx-tch/master/packages/routing'>>/etc/opkg/customfeeds.conf
              echo 'src/gz telephony https://raw.githubusercontent.com/BoLaMN/brcm63xx-tch/master/packages/telephony'>>/etc/opkg/customfeeds.conf
              ;;
            18)
              echo 'src/gz base https://repository.macoers.com/homeware/18/brcm63xx-tch/VANTW/base'>/etc/opkg/customfeeds.conf
              echo 'src/gz packages https://repository.macoers.com/homeware/18/brcm63xx-tch/VANTW/packages'>>/etc/opkg/customfeeds.conf
              echo 'src/gz luci https://repository.macoers.com/homeware/18/brcm63xx-tch/VANTW/luci'>>/etc/opkg/customfeeds.conf
              echo 'src/gz routing https://repository.macoers.com/homeware/18/brcm63xx-tch/VANTW/routing'>>/etc/opkg/customfeeds.conf
              echo 'src/gz telephony https://repository.macoers.com/homeware/18/brcm63xx-tch/VANTW/telephony'>>/etc/opkg/customfeeds.conf
              echo 'src/gz core https://repository.macoers.com/homeware/18/brcm63xx-tch/VANTW/target/packages'>>/etc/opkg/customfeeds.conf
              [ "$(uci -q get version.@version[0].version | cut -d. -f1)" = "20" ] && echo 'src/gz wg_go https://raw.githubusercontent.com/seud0nym/openwrt-wireguard-go/master/repository/arm_cortex-a9/base' >> /etc/opkg/customfeeds.conf
              ;;
            19|20)
              echo 'src/gz base https://repository.macoers.com/homeware/19/brcm6xxx-tch/VANTW/base'>/etc/opkg/customfeeds.conf
              echo 'src/gz freifunk https://repository.macoers.com/homeware/19/brcm6xxx-tch/VANTW/freifunk'>>/etc/opkg/customfeeds.conf
              echo 'src/gz packages https://repository.macoers.com/homeware/19/brcm6xxx-tch/VANTW/packages'>>/etc/opkg/customfeeds.conf
              echo 'src/gz luci https://repository.macoers.com/homeware/19/brcm6xxx-tch/VANTW/luci'>>/etc/opkg/customfeeds.conf
              echo 'src/gz routing https://repository.macoers.com/homeware/19/brcm6xxx-tch/VANTW/routing'>>/etc/opkg/customfeeds.conf
              echo 'src/gz telephony https://repository.macoers.com/homeware/19/brcm6xxx-tch/VANTW/telephony'>>/etc/opkg/customfeeds.conf
              echo 'src/gz core https://repository.macoers.com/homeware/19/brcm6xxx-tch/VANTW/target/packages'>>/etc/opkg/customfeeds.conf
              echo 'src/gz wg_go https://raw.githubusercontent.com/seud0nym/openwrt-wireguard-go/master/repository/arm_cortex-a9/base' >> /etc/opkg/customfeeds.conf
              ;;
          esac
          sed -e 's/^src/#src/' -i /etc/opkg/distfeeds.conf
          echo [$SCRIPT]: Downloading and installing packages required for repository access...
          SRC='https://downloads.openwrt.org/releases/packages-22.03/arm_cortex-a9/base'
          for IPK in $(curl -sk $SRC/Packages.gz | gunzip | grep '^Filename: ca-' | cut -d' ' -f2); do
            curl -skL $SRC/$IPK -o /tmp/$IPK && opkg --force-overwrite install /tmp/$IPK 2>&1 | logger -s -t rpc.gui.opkg -p user.info && rm /tmp/$IPK
          done
          if [ "$VERSION" = "18.1.c" ]; then
            echo [$SCRIPT]: Applying wget fix for 18.1.c...
            IPK="wget_1.19.5-4_arm_cortex-a9_neon.ipk"
            curl -skL https://repository.macoers.com/homeware/18/brcm63xx-tch/VANTW/packages/$IPK  -o /tmp/$IPK && opkg --force-overwrite install /tmp/$IPK 2>&1 | logger -s -t rpc.gui.opkg -p user.info && rm /tmp/$IPK
          fi
          echo [$SCRIPT]: Updating local package list
          opkg update | logger -s -t rpc.gui.opkg -p user.info;
        else
          echo -e "[$SCRIPT]: ${ORANGE}WARNING! No internet connection??? opkg not configured...${NC}"
        fi
      else
        echo [$SCRIPT]: Sorry!! I do not know how to configure opkg for Homeware $HOMEWARE
      fi
    else
      echo [$SCRIPT]: Looks like opkg has already been configured...
      grep -qE '\bbcm53xx\b' /etc/opkg.conf || echo 'arch bcm53xx 40'>>/etc/opkg.conf
    fi
  else
    echo [$SCRIPT]: Sorry!! I can only configure opkg for ARMv7 devices...
  fi
fi

# Guest Wi-Fi
if [ $__GUEST = y ]; then
  [ -n "$(uci -q get dhcp.guest)" ] && exec_uci delete dhcp.guest
  SRV_dhcp=$(( $SRV_dhcp + 1 ))
  for nw in $(uci -q show network | grep -E '\.Guest.*=interface'  | cut -d= -f1); do
    nwname=$(echo $nw | cut -d. -f2)
    ipaddr=$(uci -q get $nw.ipaddr)

    echo [$SCRIPT]: Removing $nwname network...

    exec_uci del_list dhcp.main.interface="$nwname"
    exec_uci delete dhcp.${nwname}_private
    SRV_dhcp=$(( $SRV_dhcp + 2 ))

    fw=$(uci -q show firewall | grep -m1 -E "'$nwname'|'$ipaddr'" | cut -d. -f1-2)
    while [ -n "$fw" ]; do
      exec_uci delete $fw
      SRV_fw=$(( $SRV_fw + 1 ))
      fw=$(uci -q show firewall | grep -m1 -E "'$nwname'|'$ipaddr'" | cut -d. -f1-2)
    done

    if [ $SRV_mesh_broker -lt 0 ]; then
      for q in $(uci -q show qos | grep "'$nwname'" | cut -d= -f1); do
        exec_uci del_list $q="$nwname"
        SRV_qos=$(( $SRV_qos + 1 ))
      done

      exec_uci del_list parental.general.lan_intf="$nwname"
      SRV_fw=$(( $SRV_fw + 1 ))

      ifname=$(uci -q get $nw.ifname)
      ap=$(uci -q show wireless | grep "iface='$ifname'" | cut -d. -f1-2)
      exec_uci delete $ap
      exec_uci delete wireless.$ifname
      SRV_wifi=$(( $SRV_wifi + 1 ))
    fi

    exec_uci delete $nw
    SRV_network=$(( $SRV_network + 1 ))
  done
  if [ $SRV_mesh_broker -ge 0 ]; then
    for ifname in Guest Guest_5GHz; do
      exec_uci del_list parental.general.lan_intf="$ifname"
      SRV_fw=$(( $SRV_fw + 1 ))

      for q in $(uci -q show qos_tch | grep "'$ifname'" | cut -d= -f1); do
        exec_uci del_list $q="$ifname"
        SRV_qos_tch=$(( $SRV_qos_tch + 1 ))
      done
    done

    for ifname in $(uci -q get web.guest.intf); do
      exec_uci delete wireless.$ifname
      SRV_wifi=$(( $SRV_wifi + 1 ))
    done
    for cred in $(uci -q get web.guest.cred); do
      exec_uci delete mesh_broker.$cred
      SRV_mesh_broker=$(( $SRV_mesh_broker + 1 ))
    done
    [ -n "$(uci -q get web.guest)" ] && exec_uci delete web.guest
  fi
  [ $SRV_mesh_broker -ge 0 ] && exec_uci commit mesh_broker
  [ $SRV_qos_tch -ge 0 ] && exec_uci commit qos_tch
  for cfg in dhcp parental qos wireless network firewall web; do
    exec_uci commit $cfg
  done
fi
if [ $SRV_mesh_broker -lt 0 -a $(uci -q show network | grep -E '\.Guest.*=interface' | wc -l) -eq 0 -a "$(uci -q get wireless.wl1_2)" = "wifi-iface" -a -z "$(uci -q get wireless.wl1_1)" ]; then
  echo [$SCRIPT]: Renaming wireless interface wl1_2 to wl1_1...
  ap=$(uci -q show wireless | grep "iface='wl1_2'" | cut -d. -f1-2)
  exec_uci rename wireless.wl1_2='wl1_1'
  exec_uci set $ap.iface='wl1_1'
  exec_uci commit wireless
  SRV_wifi=$(( $SRV_wifi + 2 ))
  if [ $SRV_multiap -ge 0 ]; then
    exec_uci set multiap.al_entity.interfaces="$(uci -q get multiap.al_entity.interfaces | sed -e 's/wl1_2/wl1_1/')"
    exec_uci set multiap.agent.bss_list="$(uci -q get multiap.agent.bss_list | sed -e 's/wl1_2/wl1_1/')"
    exec_uci set multiap.agent.backhaul_list='wl1_1'
    exec_uci commit multiap
    SRV_multiap=$(( $SRV_multiap + 3 ))
  fi
fi

echo [$SCRIPT]: Applying service changes...
[ "$__LITE" = 'R' ] && {
  for s in cupsd dumaos mesh_broker mmpbxfwctl mmpbxd mmpbxbrcmdect mud multiap_agent multiap_controller multiap_vendorextensions ndhttpd telemetry-daemon xl2tpd; do
    [ -e /etc/init.d/$s -a ! $(/etc/init.d/$s enabled) ] && { /etc/init.d/$s enable; /etc/init.d/$s start; } > /dev/null 2>&1
  done
}
/etc/init.d/watchdog-tch reload > /dev/null 2>&1
[ "$DECT_NOW" = "0" -o "$__DECT" = "0" ] && /etc/init.d/mmpbxbrcmdect stop > /dev/null 2>&1
[ "$DECT_NOW" = "0" -a "$__DECT" = "1" ] && /etc/init.d/mmpbxbrcmdect enable > /dev/null 2>&1
[ "$DLNA_NOW" = "0" -o "$__DLNAD" = "0" ] && /etc/init.d/mud stop > /dev/null 2>&1
[ "$DLNA_NOW" = "0" -a "$__DLNAD" = "1" ] && /etc/init.d/mud enable > /dev/null 2>&1
[ "$PS_NOW" = "0" -o "$__PRNTR" = "0" ] && /etc/init.d/cupsd stop > /dev/null 2>&1
[ "$PS_NOW" = "0" -a "$__PRNTR" = "1" ] && /etc/init.d/cupsd enable > /dev/null 2>&1
[ $SRV_bulkdata -gt 0 ] && { /etc/init.d/bulkdata disable; /etc/init.d/bulkdata stop; } > /dev/null 2>&1
[ $SRV_cwmp -gt 0 -a -e /etc/init.d/cwmpd ] && { /etc/init.d/cwmpd disable; /etc/init.d/cwmpd stop; } > /dev/null 2>&1
[ $SRV_dumaos -gt 0 ] && /etc/init.d/dumaos enable > /dev/null 2>&1
[ $SRV_hotspot -gt 0 -a -e /etc/init.d/hotspotd ] && { /etc/init.d/hotspotd disable; /etc/init.d/hotspotd stop; } > /dev/null 2>&1
[ $SRV_intercept -gt 0 ] && /etc/init.d/intercept enable > /dev/null 2>&1
[ $SRV_mesh_broker -gt 0 ] && /etc/init.d/mesh-broker enable > /dev/null 2>&1
[ $SRV_mmpbxd -gt 0 ] && { /etc/init.d/mmpbxd enable; /etc/init.d/mmpbxfwctl enable; } > /dev/null 2>&1
[ $SRV_monitor -gt 0 -a -e /etc/init.d/autoreset ] && { /etc/init.d/autoreset disable; /etc/init.d/autoreset stop; } > /dev/null 2>&1
[ $SRV_monitor -gt 0 -a -e /etc/init.d/tls-thor ] && { /etc/init.d/tls-thor disable; /etc/init.d/tls-thor stop; } > /dev/null 2>&1
[ $SRV_multiap -gt 0 ] && { /etc/init.d/multiap_controller enable; /etc/init.d/multiap_agent enable; /etc/init.d/multiap_vendorextensions enable; } > /dev/null 2>&1
[ $SRV_samba -gt 0 ] && /etc/init.d/samba enable > /dev/null 2>&1
[ $SRV_samba -gt 0 -a -e /etc/init.d/samba-nmbd ] && /etc/init.d/samba-nmbd enable > /dev/null 2>&1
[ $SRV_upnp -gt 0 ] && /etc/init.d/miniupnpd-tch enable > /dev/null 2>&1
if [ $RESTART_SERVICES = n ]; then
  echo -e "[$SCRIPT]: \e[0;33mSkipping service restarts\e[0m"
else
  echo [$SCRIPT]: Restarting services...
  [ "$DECT_NOW" = "0" -a "$__DECT" = "1" ] && /etc/init.d/mmpbxbrcmdect restart > /dev/null 2>&1
  [ "$DLNA_NOW" = "0" -a "$__DLNAD" = "1" ] && /etc/init.d/mud restart > /dev/null 2>&1
  [ "$PS_NOW" = "0" -a "$__PRNTR" = "1" ] && /etc/init.d/cupsd restart > /dev/null 2>&1
  [ $SRV_dhcp -gt 0 -a ! -e /etc/init.d/AdGuardHome ] && /etc/init.d/dnsmasq reload > /dev/null 2>&1
  [ $SRV_dlna -gt 0 ] && /etc/init.d/dlnad restart > /dev/null 2>&1
  [ $SRV_dropbear -gt 0 ] && /etc/init.d/dropbear reload > /dev/null 2>&1
  [ $SRV_dumaos -gt 0 ] && /etc/init.d/dumaos restart > /dev/null 2>&1
  [ $SRV_iqos -gt 0 ] && /etc/init.d/iqos restart > /dev/null 2>&1
  [ $SRV_intercept -gt 0 ] && /etc/init.d/intercept restart > /dev/null 2>&1
  [ $SRV_ledfw -gt 0 ] && /etc/init.d/ledfw restart > /dev/null
  [ $SRV_mesh_broker -gt 0 ] && /etc/init.d/mesh-broker restart > /dev/null 2>&1
  [ $SRV_mmpbxd -gt 0 ] && { /etc/init.d/mmpbxd restart; /etc/init.d/mmpbxfwctl restart; } > /dev/null 2>&1
  [ $SRV_mobiled -gt 0 ] && /etc/init.d/mobiled restart > /dev/null 2>&1
  [ $SRV_monitor -gt 0 -a -e /etc/init.d/wifi-doctor-agent ] && /etc/init.d/wifi-doctor-agent reload > /dev/null 2>&1
  [ $SRV_multiap -gt 0 ] && { /etc/init.d/multiap_controller restart; /etc/init.d/multiap_agent restart; /etc/init.d/multiap_vendorextensions restart; } > /dev/null 2>&1
  [ $SRV_nginx -gt 0 ] && /etc/init.d/nginx restart
  [ $SRV_qos -gt 0 ] && /etc/init.d/qos reload > /dev/null 2>&1
  [ $SRV_qos_tch -gt 0 ] && /etc/init.d/qos_tch reload > /dev/null 2>&1
  [ $SRV_nfc -gt 0 ] && /etc/init.d/nfcd restart > /dev/null 2>&1
  [ $SRV_ntp -gt 0 ] && /etc/init.d/sysntpd restart > /dev/null 2>&1
  [ $SRV_samba -gt 0 ] && /etc/init.d/samba reload > /dev/null 2>&1
  [ $SRV_samba -gt 0 -a -e /etc/init.d/samba-nmbd ] && /etc/init.d/samba-nmbd reload > /dev/null 2>&1
  [ $SRV_supervision -gt 0 ] && /etc/init.d/supervision reload > /dev/null 2>&1
  [ $SRV_system -gt 0 ] && /etc/init.d/system reload > /dev/null 2>&1
  [ $SRV_upnp -gt 0 ] && /etc/init.d/miniupnpd-tch restart > /dev/null 2>&1
  [ $SRV_wifi -gt 0 -a -e /etc/init.d/hostapd ] && { /etc/init.d/hostapd reload && ubus send config "{'reload':'wireless'}"; } > /dev/null 2>&1 || { ubus call wireless reload && ubus send config "{'reload':'wireless'}"; } > /dev/null 2>&1
  [ $SRV_network -gt 0 ] && /etc/init.d/network reload > /dev/null 2>&1
  [ $SRV_fw -gt 0 ] && /etc/init.d/firewall reload > /dev/null 2>&1
  [ $SRV_wansensing -gt 0 ] && /etc/init.d/wansensing restart > /dev/null 2>&1
fi
if [ $SRV_mountd -gt 0 ]; then
  mnt_path=$(uci -q get mountd.mountd.path);
  for f in $(find ${mnt_path} -type l);do
    pwd | grep -q -v "$f" && echo "[$SCRIPT]: Attempting to unmount $f..." && umount $f;
  done;
  echo -e "[$SCRIPT]: ${GREEN}NOTE: You should remove and re-insert any mounted USB device${NC}";
fi
if [ "$__LITE" = 'y' ]; then
  echo [$SCRIPT]: Disabling services to save memory...
  [ "$__DECT" = "0" ] && { /etc/init.d/mmpbxbrcmdect disable; /etc/init.d/mmpbxbrcmdect stop; } > /dev/null 2>&1
  [ "$__DLNAD" = "0" ] && { /etc/init.d/dlnad disable; /etc/init.d/dlnad stop; /etc/init.d/mud disable; /etc/init.d/mud stop; } > /dev/null 2>&1
  [ "$__DUMAOS" = "0" -a $SRV_dumaos -ge 0 ] && { /etc/init.d/dumaos disable; /etc/init.d/ndhttpd disable; /etc/init.d/dumaos stop; /etc/init.d/ndhttpd stop; } > /dev/null 2>&1
  [ "$__DUMAOS" = "0" -a $SRV_dumaos -ge 0 -a -e /etc/init.d/telemetry-daemon ] && { /etc/init.d/telemetry-daemon disable; /etc/init.d/telemetry-daemon stop; } > /dev/null 2>&1
  [ "$__INTERCEPT" = "0" ] && { /etc/init.d/intercept disable; /etc/init.d/intercept stop; } > /dev/null 2>&1
  [ "$__MMPBX" = "0" ] && { /etc/init.d/mmpbxd disable; /etc/init.d/mmpbxfwctl disable; /etc/init.d/mmpbxd stop; /etc/init.d/mmpbxfwctl stop; } > /dev/null 2>&1
  [ "$__NFC" = "0" ] && { /etc/init.d/nfcd disable; /etc/init.d/nfcd stop; } > /dev/null 2>&1
  [ "$__MULTIAP" = "0" -a $SRV_mesh_broker -ge 0 ] && { /etc/init.d/mesh-broker disable; /etc/init.d/mesh-broker stop; } > /dev/null 2>&1
  [ "$__MULTIAP" = "0" -a $SRV_multiap -ge 0 ] && { /etc/init.d/multiap_controller disable; /etc/init.d/multiap_agent disable; /etc/init.d/multiap_vendorextensions disable; /etc/init.d/multiap_controller stop; /etc/init.d/multiap_agent stop; /etc/init.d/multiap_vendorextensions stop; } > /dev/null 2>&1
  [ "$__PRNTR" = "0" ] && { /etc/init.d/cupsd disable; /etc/init.d/cupsd stop; } > /dev/null 2>&1
  [ "$__SAMBA" = "0" -a -e /etc/init.d/samba ] && { /etc/init.d/samba disable; /etc/init.d/samba stop; } > /dev/null 2>&1
  [ "$__SAMBA" = "0" -a -e /etc/init.d/samba-nmbd ] && { /etc/init.d/samba-nmbd disable; /etc/init.d/samba-nmbd stop; } > /dev/null 2>&1
  [ "$__UPNP" = "0" ] && { /etc/init.d/miniupnpd-tch disable; /etc/init.d/miniupnpd-tch stop; } > /dev/null 2>&1
  [ ! -e /etc/ipsec.conf ] && { /etc/init.d/xl2tpd disable; /etc/init.d/xl2tpd stop; } > /dev/null 2>&1
fi

if [ -n "$PACKAGES_TO_REMOVE" ]; then
  echo [$SCRIPT]: Removing packages that are no longer required \($PACKAGES_TO_REMOVE\)
  opkg --force-removal-of-dependent-packages remove $PACKAGES_TO_REMOVE
fi
# Previous versions also removed mappings-fon package, but this causes errors to be logged by transformer, so this code undoes the package removal
for f in $(find /rom/usr/lib/opkg/info -name 'mappings-fon.*'); do
  [ ! -f ${f##/rom} ] && cp -p $f ${f##/rom}
done
if [ -e /rom/usr/lib/opkg/info/mappings-fon.list ]; then
  for f in $(cat /rom/usr/lib/opkg/info/mappings-fon.list); do
    [ ! -f $f ] && cp -p /rom$f $f
  done
fi

if [ -n "$CWMPD_LOG_FILES" ]; then
  echo [$SCRIPT]: Removing old CWMP log files
  rm -f $CWMPD_LOG_FILES
fi

echo [$SCRIPT]: Cleaning up broken links in /etc/rc.d
find /etc/rc.d -type l ! -exec test -e {} \; -exec rm {} \;

SRV_network=0
if [ -n "$__IPADDR" -a "$__IPADDR" != "$(uci -q get network.lan.ipaddr)" ]; then
  echo [$SCRIPT]: Setting LAN IPv4 address to ${__IPADDR}...
  exec_uci set network.lan.ipaddr="$__IPADDR"
  exec_uci commit network
  SRV_network=$(( $SRV_network + 1 ))
fi

if [ "$VERSION" = "17.2" -a -f transformer-cli -a ! -f /usr/bin/transformer-cli ]; then
  echo [$SCRIPT]: Adding transformer-cli to command path
  cp transformer-cli /usr/bin/transformer-cli
  chmod 755 /usr/bin/transformer-cli
fi

echo [$SCRIPT]: Done!
[ $__ROOT_PWD_REMINDER = y ] && echo -e "[$SCRIPT]: ${GREEN}NOTE: If you haven't changed the root password, you should do it now...${NC}"

if [ $SRV_network -gt 0 ]; then
  echo -e "[$SCRIPT]: ${GREEN}NOTE: You will need to reconnect via SSH to the new IP address!!!${NC}";
  /etc/init.d/network reload > /dev/null 2>&1
fi

unlock normally

#!/bin/sh
# Based on:
# - https://openwrt.org/docs/guide-user/network/traffic-shaping/packet.scheduler.example5
# - https://github.com/skyformat99/eqos/blob/master/files/eqos.sh

GREEN='\033[1;32m'
ORANGE='\033[0;33m'
RED='\033[0;31m'
NC='\033[0m' # No Color

usage() {
  echo -e "${GREEN}Usage: $0 <command> [options]${NC}"
  echo -e "${GREEN}Commands:${NC}"
  echo "  start <dl_rate> <up_rate> [r2q] # Total bandwidth (Mbit/s)"
  echo "  stop"
  echo "  add <mac> <dl_rate> <up_rate>   # Limit the bandwidth of a single MAC (Mbit/s)"
  echo "  status"
  echo -e "${GREEN}Example:${NC}"
  echo "  $0 start 50 20                  # Total bandwidth: down 50Mbit/s up 20Mbit/s"
  echo "  $0 add xx:xx:xx:xx:xx:xx 10 2   # Limit a MAC:     down 10Mbit/s up  2Mbit/s"
  echo
  echo -e "Kernel messages like '${RED}HTB: quantum of class 20001 is big. Consider r2q change.${NC}'"
  echo "can be resolved by specifying a new r2q value after <dl_rate> <up_rate>. The"
  echo -e "default value is ${GREEN}35${NC}. Increase by ${GREEN}5${NC} and stop/restart until the kernel message"
  echo "disappears."
  echo -e "${GREEN}Example:${NC}"
  echo "  $0 start 50 20 40"
  echo
  echo -e "${ORANGE}NOTE:${NC}"
  echo "ALL traffic between LAN clients and the router will be also limited to the"
  echo "total bandwidth download/upload rates specified on the start command, so the"
  echo -e "router should ${RED}NOT${NC} be used for services such as file sharing. Traffic BETWEEN"
  echo "LAN clients will run at normal LAN speeds."
  exit 2
}

TCF_PATTTERN="tc filter add dev %s parent 2: protocol ip prio 5 u32 match u16 0x0800 0xFFFF at -2"
NUM_PATTERN='^[0-9]*$'
MAC_PATTERN='^[0-9a-f][0-9a-f]:[0-9a-f][0-9a-f]:[0-9a-f][0-9a-f]:[0-9a-f][0-9a-f]:[0-9a-f][0-9a-f]:[0-9a-f][0-9a-f]$'

DEV='br-lan'

stop_qos() {
  tc qdisc del dev ${DEV} root 2>/dev/null
  tc qdisc del dev ${DEV} ingress 2>/dev/null
  tc qdisc del dev ${DEV}-ifb root 2>/dev/null
  ip link del dev ${DEV}-ifb 2>/dev/null
}

start_qos() {
  local DL=$1
  local UP=$2
  local R2Q=$3
  local QL=$(ip link show ${DEV} | grep -o 'qlen [0-9]*' | cut -d' ' -f2)
  [ -z "${QL}" ] && QL=1000
  [ -z "${R2Q}" ] && R2Q=35
	
  tc qdisc add dev ${DEV} root handle 2: htb r2q ${R2Q} default 1
  tc class add dev ${DEV} parent 2: classid 2:1 htb rate ${DL}mbit
  tc qdisc add dev ${DEV} parent 2:1 handle 10: fq_codel
	
  ip link add dev ${DEV}-ifb name ${DEV}-ifb txqueuelen ${QL} type ifb
  ip link set dev ${DEV}-ifb up
	
  tc qdisc add dev ${DEV}-ifb root handle 2: htb r2q ${R2Q} default 1
  tc class add dev ${DEV}-ifb parent 2: classid 2:1 htb rate ${UP}mbit
  tc qdisc add dev ${DEV}-ifb parent 2:1 handle 10: fq_codel
	
  tc qdisc add dev ${DEV} ingress
  tc filter add dev ${DEV} parent ffff: protocol ip u32 match u32 0 0 flowid 2:1 action mirred egress redirect dev ${DEV}-ifb
}

add_mac() {
  local M0=$(echo $1 | cut -d: -f1)$(echo $1 | cut -d: -f2)
  local M1=$(echo $1 | cut -d: -f3)$(echo $1 | cut -d: -f4)
  local M2=$(echo $1 | cut -d: -f5)$(echo $1 | cut -d: -f6)
  local DL="$2"
  local UP="$3"
  local NXT=$(tc class show dev ${DEV} | wc -l)

  tc class add dev ${DEV} parent 2:1 classid 2:1${NXT} htb rate ${DL}mbit ceil ${DL}mbit
  tc qdisc add dev ${DEV} parent 2:1${NXT} handle 1${NXT}: fq_codel
  tc class add dev ${DEV}-ifb parent 2:1 classid 2:1${NXT} htb rate ${UP}mbit ceil ${UP}mbit
  tc qdisc add dev ${DEV}-ifb parent 2:1${NXT} handle 1${NXT}: fq_codel

  for D in ${DEV} ${DEV}-ifb; do
    TCF=$(printf "${TCF_PATTTERN}" ${D})
    $TCF match u16 0x${M2} 0xFFFF at -4 match u32 0x${M0}${M1} 0xFFFFFFFF at -8 flowid 2:1${NXT}
    $TCF match u32 0x${M1}${M2} 0xFFFFFFFF at -12 match u16 0x${M0} 0xFFFF at -14 flowid 2:1${NXT}
  done
}

validate() {
  echo "$2" | grep -q "$3"
  if [ $? -eq 1 ]; then
    echo -e "${RED}ERROR: Invalid $1${NC}"
    echo
    usage
  fi
}

case "$1" in
  "stop")
    stop_qos
    ;;
  "start")
    [ $# -lt 3 ] && usage
    validate "download rate" "$2" "${NUM_PATTERN}"
    validate "upload rate" "$3" "${NUM_PATTERN}"
    [ -n "$4" ] && validate "r2q" "$4" "${NUM_PATTERN}"
    stop_qos
    start_qos $2 $3 $4
    ;;
  "add")
    [ $# -ne 4 ] && usage
    validate "MAC address" "$(echo $2 | tr '[A-F]' '[a-f]')" "$MAC_PATTERN"
    validate "download rate" "$3" "${NUM_PATTERN}"
    validate "upload rate" "$4" "${NUM_PATTERN}"
    add_mac "$2" "$3" "$4"
    ;;
  "status")
    for D in ${DEV} ${DEV}-ifb; do
      echo -e "${GREEN}Device ${D}:${NC}"
      for O in qdisc class filter; do
        tc -s ${O} show dev ${D}
        [ $? -ne 0 ] && break
      done
    done
    ;;
  *)
    usage
    ;;
esac

